<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在Docker中使用Rclone作为储存卷</title>
      <link href="/p/13d3.html"/>
      <url>/p/13d3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>在各个平台，或本地使用 <code>Docker</code> 时，一定会遇到一些容器，想让它们的储存同步到云端，方便以后新建容器时好继承上一个容器的储存。本文会教大家如何安装 <code>rclone</code> 作为 <code>docker</code> 插件，以方便使用各个云平台作为容器储存卷。*本文提到的<code>插件</code>若未明确表达均指代 <code>rclone docker plugin</code>。部分内容来自 <a href="https://rclone.org/docker/">https://rclone.org/docker/</a> </p><h1 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h1><p>你需要准备一个有 <code>Docker API Version 1.12</code> 以上的环境，推荐 <code>1.40+</code> 可以使用 <code>docker version</code> 查看你当前安装的 Docker 版本。并安装 <code>docker-comps</code> (可选)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Client:</span><br><span class="line"> Version:           20.10.17+azure-1</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.17.11</span><br><span class="line"> Git commit:        </span><br><span class="line"> Built:             Mon Jun  6 21:36:39 UTC 2022</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.17+azure-1</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.17.11</span><br><span class="line">  Git commit:       </span><br><span class="line">  Built:            Mon Jun  6 22:32:38 2022</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br></pre></td></tr></table></figure><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><h3 id="安装流程："><a href="#安装流程：" class="headerlink" title="安装流程："></a>安装流程：</h3><ol><li>首先你需要在你的 主机(VPS等) 安装 <code>FUSE</code> 模块，这是必要的！</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install fuse</span><br></pre></td></tr></table></figure><ol start="2"><li>创建两个 <code>rclone docker plugin</code> 的数据缓存文件夹（默认）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /var/lib/docker-plugins/rclone/config</span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /var/lib/docker-plugins/rclone/cache</span><br></pre></td></tr></table></figure><ol start="3"><li>为你的docker安装插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker plugin install rclone/docker-volume-rclone:amd64 args=<span class="string">&quot;-v&quot;</span> --<span class="built_in">alias</span> rclone --grant-all-permissions</span><br><span class="line">docker plugin list <span class="comment">#查看插件列表 出现NAME=rclone:latest;ENABLED=true 说明安装并启用成功了</span></span><br></pre></td></tr></table></figure><ol start="4"><li>你可以根据需求，更换 <code>rclone.conf</code> 及 <code>cache</code> 文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker plugin <span class="built_in">disable</span> rclone <span class="comment">#禁用rclone插件</span></span><br><span class="line">docker plugin <span class="built_in">set</span> rclone RCLONE_VERBOSE=2 config=/root/.config/rclone cache=/tmp/rclone args=<span class="string">&quot;--vfs-cache-mode=writes --allow-other&quot;</span> <span class="comment">#配置文件夹及缓存文件夹</span></span><br><span class="line">docker plugin <span class="built_in">enable</span> rclone <span class="comment">#启用rclone插件</span></span><br><span class="line">docker plugin inspect rclone <span class="comment">#查看插件配置</span></span><br></pre></td></tr></table></figure><h3 id="挂载流程："><a href="#挂载流程：" class="headerlink" title="挂载流程："></a>挂载流程：</h3><h4 id="SFTP-卷挂载示例"><a href="#SFTP-卷挂载示例" class="headerlink" title="SFTP 卷挂载示例"></a>SFTP 卷挂载示例</h4><ol><li>创建 <code>sftpvolume</code> 卷（ sftpvolume为储存卷名 ）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create sftpvolume -d rclone -o <span class="built_in">type</span>=sftp -o sftp-host=_hostname_ -o sftp-user=_username_ -o sftp-pass=_password_ -o allow-other=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建使用 <code>sftpvolume</code> 卷的容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -it -v sftpvolume:/mnt --workdir /mnt ubuntu:latest bash</span><br><span class="line"><span class="comment"># sftpvolume:/mnt 指的是：你SFTP中 /mnt 目录（和原版rclone是一样）</span></span><br><span class="line"><span class="comment"># --workdir /mnt 指的的：容器内部目录 /mnt</span></span><br></pre></td></tr></table></figure><p>如果一切配置正确的话，你会进入到这个新的容器。你可以输入<code>ls</code>命令查看 &#x2F;mnt 内容</p><h4 id="任意网络盘挂载示例"><a href="#任意网络盘挂载示例" class="headerlink" title="任意网络盘挂载示例"></a>任意网络盘挂载示例</h4><p>*<a href="https://rclone.org/docker/">Rclone官方示例</a> 为 Google Drive 我们这里用 Onedrive 做演示</p><ol start="0"><li><p>在另外任意一台机器，创建你想挂载的网盘，比如 Onedrive，将生成的 <code>rclone.conf</code> 配置文件 移动到你 主机(VPS等) 的 <code>/var/lib/docker-plugins/rclone/config/rclone.conf</code> 目录（默认：如果没有走安装流程的第四步，就是一开始 <code>mkdir</code> 的文件夹）  <a href="https://rclone.org/docs/">附录：创建网盘教程</a> 配置文件看起来应该是下面这样（onedrive）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[oodrive]</span><br><span class="line">type = onedrive</span><br><span class="line">client_id = 180xxxx2-0114-xxxxaf31-24aaxxxxx0cb</span><br><span class="line">client_secret = Xik7Q~JxxxxxoaO8aKxxxxxvclxlxxxxx8</span><br><span class="line">token = &#123;&quot;access_token&quot;:&quot;xxx&quot;,&quot;expiry&quot;:&quot;2022-05-04T07:30:31.869533611+08:00&quot;&#125;</span><br><span class="line">drive_id = b!xxxxxxxx-SdYUkcM9xT9TKp</span><br><span class="line">drive_type = business</span><br></pre></td></tr></table></figure></li><li><p>创建一个文件名为 <code>example.yml</code> 的 docker swarm stack：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">heimdall:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">linuxserver/heimdall:latest</span></span><br><span class="line">    <span class="attr">ports:</span> [<span class="number">8080</span><span class="string">:80</span>]</span><br><span class="line">    <span class="attr">volumes:</span> [<span class="string">configdata:/config</span>]</span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">configdata:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">rclone</span></span><br><span class="line">    <span class="attr">driver_opts:</span></span><br><span class="line">      <span class="attr">remote:</span> <span class="string">&#x27;oodrive:heimdall&#x27;</span></span><br><span class="line">      <span class="attr">allow_other:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">vfs_cache_mode:</span> <span class="string">full</span></span><br><span class="line">      <span class="attr">poll_interval:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ol start="2"><li>运行这个stack</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy example -c ./example.yml</span><br></pre></td></tr></table></figure><ol start="3"><li>在一段时间后，会创建 <code>example_heimdall</code> 服务并在8080端口启动，你可以使用以下指令查看</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service ls</span><br><span class="line">docker service ps example_heimdall</span><br><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><ol start="4"><li>在测试结束后你可以使用 <code>docker stack remove example</code> 移除服务，使用 <code>docker volume remove example_configdata</code> 移除储存卷。</li></ol><h4 id="使用CLI创建卷"><a href="#使用CLI创建卷" class="headerlink" title="使用CLI创建卷"></a>使用CLI创建卷</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume create vol1 -d rclone -o remote=storj: -o vfs-cache-mode=full</span><br><span class="line">docker volume create vol2 -d rclone -o remote=:storj,access_grant=xxx:heimdall</span><br><span class="line">docker volume create vol3 -d rclone -o type=storj -o path=heimdall -o storj-access-grant=xxx -o poll-interval=0</span><br></pre></td></tr></table></figure><h4 id="使用Docker-Swarm-或Docker-Compose"><a href="#使用Docker-Swarm-或Docker-Compose" class="headerlink" title="使用Docker Swarm 或Docker Compose"></a>使用Docker Swarm 或Docker Compose</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">volume_name_1:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">rclone</span></span><br><span class="line">    <span class="attr">driver_opts:</span></span><br><span class="line">      <span class="attr">remote:</span> <span class="string">&#x27;oodrive:&#x27;</span></span><br><span class="line">      <span class="attr">allow_other:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">vfs_cache_mode:</span> <span class="string">writes</span></span><br><span class="line">      <span class="attr">token:</span> <span class="string">&#x27;&#123;&quot;type&quot;: &quot;borrower&quot;, &quot;expires&quot;: &quot;2021-12-31&quot;&#125;&#x27;</span></span><br><span class="line">      <span class="attr">poll_interval:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="实战总结："><a href="#实战总结：" class="headerlink" title="实战总结："></a>实战总结：</h3><p>以下为使用 compos 部署 alist 并挂载云端的配置，注意 <code>oodrive</code> 为你的 <code>rclone</code> 配置文件中的网盘名字，请读完全文再抄袭！</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> <span class="attr">alistr:</span>                            <span class="comment">#服务名 alistr 任意</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">xhofe/alist:latest</span>        <span class="comment">#容器镜像 xhofe/alist</span></span><br><span class="line">   <span class="attr">ports:</span> [<span class="number">5244</span><span class="string">:5244</span>]               <span class="comment">#容器端口 5244</span></span><br><span class="line">   <span class="attr">network_mode:</span> <span class="string">host</span>               <span class="comment">#网络模式 host</span></span><br><span class="line">   <span class="attr">volumes:</span> [<span class="string">adata:/opt/alist/data</span>] <span class="comment">#卷名 adata 挂载至容器内/ opt/alist/data</span></span><br><span class="line"><span class="attr">volumes:</span>                            <span class="comment">#储存卷配置：</span></span><br><span class="line"> <span class="attr">adata:</span>                             <span class="comment">#定义上面的卷名 adata</span></span><br><span class="line">   <span class="attr">driver:</span> <span class="string">rclone</span>                   <span class="comment">#磁盘名 rclone</span></span><br><span class="line">   <span class="attr">driver_opts:</span>                     <span class="comment">#磁盘配置</span></span><br><span class="line">     <span class="attr">remote:</span> <span class="string">oodrive:/example/alist</span> <span class="comment">#同步 oodrive 下 /example/alist 文件</span></span><br><span class="line">     <span class="attr">allow_other:</span> <span class="string">&#x27;true&#x27;</span>            <span class="comment">#类似rclone mount配置</span></span><br><span class="line">     <span class="attr">vfs_cache_mode:</span> <span class="string">writes</span>         <span class="comment">#类似rclone mount配置</span></span><br><span class="line">     <span class="attr">poll_interval:</span> <span class="number">0</span>               <span class="comment">#类似rclone mount配置</span></span><br></pre></td></tr></table></figure><p>如果出现 <code>Unsupported config option for services.volumes: &#39;XXXX&#39;</code> 一般为 <code>rclone.conf</code> 未配置正确，请检查路径及网盘token密码等。</p><h1 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h1><p>当然，你可以在每次机器启动后 手动&#x2F;使用守护进程 挂载onedrive或其他rclone配置，再重启docker。但是使用插件可以大大增加效率，配置一次就能永久爽快体验。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> 网盘 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Replit部署每日新闻项目</title>
      <link href="/p/7e53.html"/>
      <url>/p/7e53.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>相信大家都有看到过，群里，公众号中，发过的每日新闻图片吧，作为一个爬虫项目的金典例子，这里给大家带来一个新的仓库，可以合并这些内容的项目：</p><p><a href="https://github.com/zkeq/news">zkeq&#x2F;news: 前后端均基于 vercel 的轻量级每日早报项目，支持一键部署，支持部署至服务器。后端由 FastAPI + BeautifulSoup 实现。 (github.com)</a></p><p>由于我的 <code>vercel</code> 请求太多了，这个项目需要用到 <code>severless</code> 资源，这里我们将这个项目部署至 <code>Replit</code> 来减少 <code>vercel</code> 负担(</p><h1 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h1><ol><li>注册一个Replit账号</li><li>最好再注册一个Team</li></ol><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><p>打开 <code>replit</code> 新建一个 <code>python</code> 仓库</p><p>在 shell 中输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/valetzx/newsonreplit &amp;&amp; <span class="built_in">mv</span> -b newsonreplit/* ./ &amp;&amp; <span class="built_in">mv</span> -b newsonreplit/.[^.]* ./ &amp;&amp; <span class="built_in">rm</span> -rf *~ &amp;&amp; <span class="built_in">rm</span> -rf newsonreplit</span><br></pre></td></tr></table></figure><p>等待 <code>Loading Nix environment...</code> 完成后，点绿色 <code>Run</code> 运行</p><p>是不是肥肠的简单捏！</p><h1 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h1><p>很明显，这个前端只能从部署的域名访问吗？</p><p>并不是，我们可以通过修改 <code>index.js</code> 达到前后端分离的效果：</p><p>在你的服务器上下载 <a href="https://github.com/zkeq/news">https://github.com/zkeq/news</a> 源码解压</p><p>修改 47行到67行的 <code>api</code> 请求，以及241行到257行的 <code>api</code> 请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">first_xhr</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> now_time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getHours</span>() +<span class="string">&quot;hrs&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getMinutes</span>() + <span class="string">&quot;min&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> xhr_zhihu = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr_zhihu.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/api?origin=zhihu&amp;_vercel_no_cache=1&#x27;</span> + <span class="string">&#x27;&amp;cache=&#x27;</span> + now_time);</span><br><span class="line">        xhr_zhihu.<span class="property">onload</span> = zhihu_first_load;</span><br><span class="line">        xhr_zhihu.<span class="property">onerror</span> = handleError_zhihu;</span><br><span class="line">        xhr_zhihu.<span class="title function_">send</span>();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="title function_">handleError_zhihu</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> xhr_163 = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr_163.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/api?origin=163&amp;_vercel_no_cache=1&#x27;</span>+ <span class="string">&#x27;&amp;cache=&#x27;</span> + now_time);</span><br><span class="line">        xhr_163.<span class="property">onload</span> = _163_init_load;</span><br><span class="line">        xhr_163.<span class="property">onerror</span> = handleError_163;</span><br><span class="line">        xhr_163.<span class="title function_">send</span>();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="title function_">handleError_163</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get_day_news</span>(<span class="params">index, origin</span>)&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="title class_">NProgress</span>.<span class="title function_">start</span>();</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="keyword">if</span> (origin === <span class="string">&#x27;zhihu&#x27;</span>) &#123;</span><br><span class="line">            cache =  <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;zhihu_cache&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cache =  <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;163_cache&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">`/api?index=<span class="subst">$&#123;index&#125;</span>&amp;cache=<span class="subst">$&#123;cache&#125;</span>&amp;origin=<span class="subst">$&#123;origin&#125;</span>`</span>);</span><br><span class="line">        xhr.<span class="property">onload</span> = days_load;</span><br><span class="line">        xhr.<span class="property">onerror</span> = handleError;</span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">      &#125; <span class="keyword">catch</span>(error)&#123;</span><br><span class="line">            <span class="title function_">handleError</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将所有的 <code>/api</code> 前，添加上你的replit部署完成的域名，例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr_zhihu.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://news.pighog.repl.co/api?origin=zhihu&amp;_vercel_no_cache=1&#x27;</span> + <span class="string">&#x27;&amp;cache=&#x27;</span> + now_time);</span><br></pre></td></tr></table></figure><p>修改完成后，在你的服务器中配置访问 <code>index.html</code> 就可以达到前后端分离的效果拉！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Replit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息泄露分析以及日常</title>
      <link href="/p/f0c0.html"/>
      <url>/p/f0c0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="信息泄露："><a href="#信息泄露：" class="headerlink" title="信息泄露："></a>信息泄露：</h1><p>最近两个月这个信息泄露严重啊，先是学习通然后上海gov数据库泄露。有人直接把登录验证直接写进注释当成某教程给发表了，实在是牛。公开的750K也不像是假的。我目前看到的，包含姓名、身份证、电话、家庭住址（部分精确到门牌号）、报案记录、案件描述等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">datahubWriter</span><span class="params">(String topic)</span>&#123;</span><br><span class="line">    <span class="comment">// Endpoint以Region: 华东1为例，其他Region请按实际情况填写</span></span><br><span class="line">    <span class="type">RecordSchema</span> <span class="variable">schema</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordSchema</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> ObjectParseUtils.objectToMap(dto);</span><br><span class="line">    <span class="keyword">for</span>(Object key : map.keySet())&#123;</span><br><span class="line">        schema.addField(<span class="keyword">new</span> <span class="title class_">Field</span>(key.toString(), FieldType.STRING));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">    // Endpoint以Region: 华东1为例，其他Region请按实际情况填写</span></span><br><span class="line"><span class="comment">    String endpoint = &quot;https://datahub.cn-shanghai-shga-d01.dh.alicloud.ga.sh&quot;;</span></span><br><span class="line"><span class="comment">    String accessId = &quot;0iWV0NCs805VuAAu&quot;;</span></span><br><span class="line"><span class="comment">    String accessKey = &quot;iEwlgpCnXDwT93YMVDb2G60my9ne81&quot;;</span></span><br><span class="line"><span class="comment">    String projectName = &quot;sjc_rwzx&quot;;</span></span><br><span class="line"><span class="comment">    String topicName = &quot;task_center_platform_request&quot;;</span></span><br><span class="line"><span class="comment">    RecordSchema schema = new RecordSchema();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span><span class="comment">/*TaskCenterPRPDTO dto = new TaskCenterPRPDTO();</span></span><br><span class="line"><span class="comment">    dto.setBiz_sys_code(&quot;&quot;)</span></span><br><span class="line"><span class="comment">            .setBiz_sys_name(&quot;&quot;)</span></span><br><span class="line"><span class="comment">            .setRef_id(&quot;&quot;)</span></span><br><span class="line"><span class="comment">            .setResult_code(&quot;&quot;)</span></span><br><span class="line"><span class="comment">            .setResult_msg(&quot;&quot;)</span></span><br><span class="line"><span class="comment">            .setTitle(&quot;&quot;);*/</span><span class="comment">/*</span></span><br></pre></td></tr></table></figure><p>这种情况你网络上信息保护做的再好都没用，当然从QQ直接获取身份证还是比较绕的，但是从 手机 获取你真实的家庭地址会更容易了。750K库撞上就是纯纯运气不好，寄。</p><h1 id="我的日常："><a href="#我的日常：" class="headerlink" title="我的日常："></a>我的日常：</h1><p>上班快三个月了，有点笨，学的东西不太用的上，好多东西会忘记，最近在玩Azure，结果搜了一圈都没啥好玩的，开了个虚拟机（12个月）能永久白嫖的项目都不太用的上，或者有更好的，可惜了。上班好累，不知道以后干啥，其实要做老板更累吧。很多东西别人都看不到捏。</p><p> x 每天都差不多，无语，最近做梦都能梦到上班的事。最近A股拉升了，是 牛 市 要 来 了 吗 ！好想什么都不管，想去到处玩，但是疫情好麻烦，怕玩了一圈回来发现还是家里最好，就（ 不过确实家里最好。加油加油！</p><h1 id="新的仓库："><a href="#新的仓库：" class="headerlink" title="新的仓库："></a>新的仓库：</h1><p>新增了一个在Replit白嫖一个firefox的仓库，可以noVnc连接，比较简单。但是novnc没有声音，有点可惜，只能临时查查资料之类的，<a href="https://github.com/valetzx/firefoxonreplit">https://github.com/valetzx/firefoxonreplit</a> 仓库README写的英文，晚点会发个中文的教程吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白嫖Github学生包！</title>
      <link href="/p/98.html"/>
      <url>/p/98.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>喜报喜报！我申请到Github学生包拉！不过有点可惜，是小号的（</p><p><img src="https://img.pighog.repl.co/2022/06/image-20220628210151052.png" alt="image-20220628210151052"></p><blockquote><p>这里写一写注意事项，以及拿到学生包后，可以白嫖哪些东西。</p><p>在这之前贴一个后面可能要用的<a href="https://docs.qq.com/sheet/DVHZ2V1pYVmtvbVBG">【腾讯文档】Azure 服务列表。</a></p></blockquote><h1 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h1><p>在国内，你可以登录学信网：<a href="https://www.chsi.com.cn/">中国高等教育学生信息网 (chsi.com.cn)</a> 获取在线认证信息表 ↓</p><p><img src="https://img.pighog.repl.co/2022/06/image-20220628210803045.png" alt="image-20220628210803045"></p><p><img src="https://img.pighog.repl.co/2022/06/image-20220628210823943.png" alt="image-20220628210823943"></p><p><img src="https://img.pighog.repl.co/2022/06/image-20220628211020349.png" alt="image-20220628211020349"></p><p>这里可以申请到 <strong>中文</strong> 的在线验证报告，可以点击查看后下载为 PDF (这里圈起来要考)</p><p><img src="https://img.pighog.repl.co/2022/06/image-20220628211228215.png" alt="image-20220628211228215"></p><p>为了Github的审核能清楚阅读你的信息，你可能需要一份 <strong>英文</strong> 版本的报告，但是在你一顿搜索后发现 英文版是要 付钱的？！30？不 够 白 嫖！这时，我们拿出之前下载的 PDF ？自 己 翻 译 ！肥肠的简单啊，只需要把你上面信息黏贴到翻译软件就完事了。</p><p><img src="https://img.pighog.repl.co/2022/06/image-20220628211803365.png" alt="image-20220628211803365"></p><p>这里我发一部分给大家参考一下：</p><table><thead><tr><th align="center"><strong>教育部学籍在线验证报告</strong></th><th align="center"><strong>Ministry of Education Student Status Online Verification Report</strong></th></tr></thead><tbody><tr><td align="center"><strong>更新日期：2022年6月22日</strong></td><td align="center"><strong>Updated Time: June 22, 2022</strong></td></tr><tr><td align="center"><strong>姓名&#x2F;性别&#x2F;民族&#x2F;证件号码&#x2F;出生日期</strong></td><td align="center"><strong>Name&#x2F;Gender&#x2F;Ethnicity&#x2F;ID Number&#x2F;Date of Birth</strong></td></tr><tr><td align="center"><strong>…</strong></td><td align="center"><strong>…</strong></td></tr></tbody></table><p>非常简单啊，在翻译好之后，我们就可以打开申请网站：<a href="https://education.github.com/">https://education.github.com/</a></p><p>点击 Sign up for Student 的绿按钮 准备填写信息，但是！</p><p>啊注意这个但是，在这之前有几个需要注意的地方：</p><ol><li>注意如果可以，最好使用自己学信网真实的信息。</li><li>当Github需要你的位置权限的时候，请给他获取！</li><li>不要用代理，梯子等方式进入Github ！！！</li><li>如果自己号之前被拒绝多次，可以换小号试试。</li></ol><p>这个第三点比较重要，最好是不要挂代理，Github会获取你的位置，及IP？用来验证你填的学校是不是和你所在位置差不多。用国外梯子填国内学校大概率是秒拒绝。<strong>Rejected</strong> ！</p><p>在准备好你的电脑环境之后，填写网页中信息：</p><table><thead><tr><th align="center">What e-mail address do you use for school?(你的邮箱) *</th><th align="center">选自己邮箱就行，可以不一定要用EDU邮箱</th></tr></thead><tbody><tr><td align="center">What is the name of your school?(学校名字) *</td><td align="center">写学信网上你的学校名字，如果Github弹出信息可以直接选那最好。</td></tr><tr><td align="center">How do you plan to use GitHub?(怎么使用) *</td><td align="center">随便写就好，比如 Use to study sth   program…</td></tr></tbody></table><p>填好后就可以按 Continue 继续了，在这之后，你要 截图&#x2F;拍照 上传，你的信息报告。</p><p>当你只有拍照选项的时候，请换手机&#x2F;或使用电脑前置，拍摄翻译好的PDF文件，千万不要使用OBS虚拟摄像头，有概率被秒拒。有一点点糊没太大问题，只要不是被秒拒，有很大概率是会通过的！在申请后的三五天内，Github会发邮件告诉你申请的情况。</p><p>在获得学生包后，我们可以愉快的白嫖很多很多应用（70+）啦！这里推荐的有：MS Azure（晚点会慢慢出详细的白嫖教程）、Replit（已经出了部分白嫖教程）、Copilot（AI写代码）、Canva（好用的平面设计12月）、Namecheap（.me域名12月）、Name.com（域名1年，SSL安全证书1年）、GitLens（vscode插件）、DigitalOcean（云服务$100刀优惠）、</p><p><img src="https://img.pighog.repl.co/2022/06/image-20220628215140873.png" alt="image-20220628215140873"></p><p>TECH（.TECH域名1年+2个邮箱账号100MB储存）、DataCamp（交互式学习分析3个月）、MongoDB（数据库$50刀积分$150刀优惠）、OneMonth（30天学习HTML, CSS, JavaScript and Python）、Iconscout（矢量图库每月60币持续1年）、Datadog（数据库监控10服务器PRO账号2年）、Gitpod（代码直接在线跑6月）还有很多，这里不全列了。</p><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><p>接下来开始我们的白嫖之旅，首先是Azure，这个必入！微软丰富的资源库任你使用$100刀，随便霍霍，这里列了个表：<a href="https://docs.qq.com/sheet/DVHZ2V1pYVmtvbVBG">https://docs.qq.com/sheet/DVHZ2V1pYVmtvbVBG</a> 表里会更新Azure免费服务与部分服务教程。</p><table><thead><tr><th>Azure 服务</th><th>描述</th><th>类型</th><th>每月免费使用量</th><th>免费期限</th></tr></thead><tbody><tr><td>Azure   Active Directory (Azure AD)</td><td>在云中启用标识和访问管理。</td><td>Identity</td><td>50,000 个存储对象，可用单一登录 (SSO) 的方式登录到所有云应用</td><td>永久</td></tr><tr><td>Azure   Arc</td><td>扩展 Azure 管理和服务。</td><td>Hybrid + multicloud</td><td>Azure 外部资源的免费 Azure 控制平面功能，搜索和索引已启用 Azure Arc 的资源</td><td>永久</td></tr><tr><td>Azure   Cosmos DB</td><td>使用具有开放 API 的快速 NoSQL 数据库构建任意规模的新式应用。</td><td>Databases</td><td>每秒 1000 个请求单位的预配吞吐量，外加 25 GB 存储空间</td><td>永久</td></tr><tr><td>Azure   DevOps</td><td>使用 Git 存储库、CI&#x2F;CD、生成和发布自动化以任何语言构建应用。</td><td>Developer tools</td><td>5 位用户具有无限制的专用 Git 存储库</td><td>永久</td></tr><tr><td>Azure   Kubernetes 服务 (AKS)</td><td>使用所选工具部署和管理容器。</td><td>Compute</td><td>免费</td><td>永久</td></tr><tr><td>Azure   Lighthouse</td><td>使用零信任访问控制管理服务提供商。</td><td>Management and governance</td><td>免费</td><td>永久</td></tr><tr><td>Azure   Migrate</td><td>发现、评估本地虚拟机，调整其大小并将其迁移到 Azure。</td><td>Migration</td><td>免费</td><td>永久</td></tr><tr><td>Azure   Policy</td><td>通过一致的资源调控，实现大规模的实时云合规性。</td><td>Management and governance</td><td>免费访问配置和更改跟踪功能</td><td>永久</td></tr><tr><td>Azure   SignalR 服务</td><td>将实时通信添加到 Web 应用程序中。</td><td>Web</td><td>每单位 20 个并发连接，20,000 条消息</td><td>永久</td></tr><tr><td>DevTest   Labs</td><td>启用快速、简单和高效的开发&#x2F;测试环境。</td><td>Developer tools</td><td>免费</td><td>永久</td></tr><tr><td>Functions</td><td>使用无服务器代码体系结构处理事件。</td><td>Compute</td><td>100 万次请求</td><td>永久</td></tr><tr><td>IoT   Edge</td><td>将云智能和分析扩展到 IoT 边缘设备。</td><td>Internet of Things</td><td>免费的开源边缘运行时</td><td>永久</td></tr><tr><td>IoT   中心</td><td>使用可缩放的平台连接、监视并管理 IoT 资产。</td><td>Internet of Things</td><td>免费版本每天 8,000 条消息和 .5 KB 消息计量大小</td><td>永久</td></tr><tr><td>Service   Fabric</td><td>构建和运行始终在线、可缩放的分布式应用。</td><td>Containers</td><td>免费</td><td>永久</td></tr><tr><td>SQL   Server 2019 Developer 版本</td><td>在非生产环境中构建、测试和演示应用程序。</td><td>Developer tools</td><td>免费</td><td>永久</td></tr><tr><td>Visual   Studio Code</td><td>使用用于云开发的功能强大的轻型代码编辑器提升工作效率。</td><td>Developer tools</td><td>免费</td><td>永久</td></tr><tr><td>安全中心</td><td>通过增加对 Azure 资源的可见性并控制其安全性来预防、检测和响应威胁。</td><td>Security</td><td>免费策略评估和建议</td><td>永久</td></tr><tr><td>沉浸式阅读器</td><td>将文本读取和理解功能嵌入应用程序中。</td><td>AI + machine learning</td><td>300 万个字符</td><td>永久</td></tr><tr><td>带宽（数据传输）</td><td>通过我们强大的全球数据中心网络传输入站和出站数据。</td><td>Networking</td><td>5 GB 出站</td><td>永久</td></tr><tr><td>顾问</td><td>获得针对 Azure 的个性化建议和最佳实践。</td><td>Management and governance</td><td>无限制</td><td>永久</td></tr><tr><td>机器人服务</td><td>开发可按需缩放的企业级智能机器人。</td><td>AI + machine learning</td><td>10,000 条高级通道消息和无限量的标准通道消息</td><td>永久</td></tr><tr><td>机器学习</td><td>在选择的平台上开发和运行 R 和 Python 模型。</td><td>AI + machine learning</td><td>100 个模块，每个试验 1 小时，提供 10 GB 存储空间</td><td>永久</td></tr><tr><td>监视器</td><td>获取对应用程序、基础结构和网络的完全可观测性。</td><td>Management and governance</td><td>有关每个功能的免费量，请参阅 Azure Monitor 定价详细信息</td><td>永久</td></tr><tr><td>静态   Web 应用</td><td>简化从源代码到全局高可用性的全栈开发。</td><td>Compute</td><td>每项订阅 100 GB 带宽，每个应用 2 个自定义域和 .5 GB 存储</td><td>永久</td></tr><tr><td>开放数据集</td><td>使用精选数据集加速机器学习。</td><td>AI + machine learning</td><td>免费(可能收取流出量费用)</td><td>永久</td></tr><tr><td>空间定位点</td><td>构建用于映射、共享和保留 3D 内容的混合现实应用。</td><td>Mixed reality</td><td>已查询的 10,000 个定位点</td><td>永久</td></tr><tr><td>逻辑应用</td><td>跨云和本地系统构建自动化集成解决方案。</td><td>Integration</td><td>4,000 次内置操作，使用消耗计划</td><td>永久</td></tr><tr><td>批处理</td><td>使用适用于 HPC 应用程序的作业流程和规划功能在云端缩放应用程序。</td><td>Compute</td><td>免费</td><td>永久</td></tr><tr><td>人脸</td><td>检测、识别、分析、组织并标记图像中的人脸。</td><td>AI + machine learning</td><td>30,000 个免费实例事务</td><td>永久</td></tr><tr><td>认知搜索</td><td>在 Web 和移动应用程序中含入云搜索服务。</td><td>AI + machine learning</td><td>每个服务 50 MB 存储空间，用于存储 10,000 个托管文档和 3 个索引</td><td>永久</td></tr><tr><td>事件网格</td><td>实现大规模的可靠事件交付。</td><td>Integration</td><td>每月 100,000 次操作</td><td>永久</td></tr><tr><td>数据工厂</td><td>大规模地构成和管理数据服务。</td><td>Analytics</td><td>5 个低频率活动</td><td>永久</td></tr><tr><td>数据库迁移服务</td><td>简化到云的本地数据库迁移。</td><td>Databases</td><td>免费标准计算</td><td>永久</td></tr><tr><td>数据目录</td><td>从企业数据资产获取更多价值。</td><td>Analytics</td><td>无限制的用户</td><td>永久</td></tr><tr><td>通知中心</td><td>从任何后端向任何平台发送推送通知。</td><td>Mobile</td><td>100 万条推送通知，提供免费命名空间</td><td>永久</td></tr><tr><td>网络观察程序</td><td>监视、诊断并深入了解网络性能和运行状况。</td><td>Networking</td><td>5 GB 存储空间，提供 1,000 次检查、10 个测试和 10 个连接指标</td><td>永久</td></tr><tr><td>文本转语音</td><td>生成将文本转换为逼真语音的应用。</td><td>AI + machine learning</td><td>标准 - 500 万个字符、神经网络 - 500,000 个字符以及自定义 - 500 万个字符，1 个自定义终结点托管模型</td><td>永久</td></tr><tr><td>虚拟网络</td><td>设置专用网络并连接到本地数据中心。</td><td>Networking</td><td>50 个虚拟网络</td><td>永久</td></tr><tr><td>应用程序配置</td><td>存储和管理所有 Azure 应用的配置。</td><td>Developer tools</td><td>每天 1,000 个请求，提供 10 MB 存储空间</td><td>永久</td></tr><tr><td>应用服务</td><td>使用 Node.js 和 PHP 等所选工具，快速创建适用于任何平台或设备的强大应用。</td><td>Compute</td><td>10 个 Web、移动或 API 应用，提供 1 GB 存储空间</td><td>永久</td></tr><tr><td>语音翻译</td><td>将实时语音翻译集成到应用中。</td><td>AI + machine learning</td><td>标准 - 5 小时音频</td><td>永久</td></tr><tr><td>语音转文本</td><td>将口头音频听录为文本。</td><td>AI + machine learning</td><td>标准、自定义和对话听录多声道音频各 5 小时音频、1 个自定义终结点托管模型</td><td>永久</td></tr><tr><td>专用链接</td><td>以私密方式访问 Azure 上的服务，从而将数据保留在 Microsoft 网络上。</td><td>Networking</td><td>免费</td><td>永久</td></tr><tr><td>自动化</td><td>使用流程自动化来简化云管理。</td><td>Management and governance</td><td>500 分钟的作业运行时</td><td>永久</td></tr></tbody></table><p>以及Replit白嫖指北：</p><p><a href="https://blog.learnonly.xyz/p/1849.html">在Replit中配置Nix环境 | 我的作品集 (learnonly.xyz)</a></p><p><a href="https://blog.learnonly.xyz/p/c99d.html">在Replit中自建监控网站 | 我的作品集 (learnonly.xyz)</a></p><p><a href="https://blog.learnonly.xyz/p/aa4a.html">使用Replit白嫖各种语言项目 | 我的作品集 (learnonly.xyz)</a></p><p>更多其他的内容我会慢慢发，冲冲冲！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Github </tag>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker运行Macos</title>
      <link href="/p/3412.html"/>
      <url>/p/3412.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>玩了玩Docker，最近在白嫖某代码空间，正好看到个可以在Docker中跑Mac的仓库（<a href="https://github.com/taylorcoffelt/macos-docker">taylorcoffelt&#x2F;macos-docker: Runs a macOS image on QEMU in a docker container, with VNC, SSH and SPICE access (github.com)</a>），就运行了跑了跑。原仓库默认的 <code>docker-compose.yml</code> 配了4G运存，但是在某代码空间跑了三遍，都在第一次启动展开镜像下系统的时候寄(鲨进程)了，后来缓存了2G运行内存，理论上 mojave 是能带起来跑一跑的，毕竟系统老(当然如果你自己有新macos镜像，并且机器配置过硬的话，也可以自己构建，原仓库都有教程，也是比较简单的。</p><p><img src="https://img.pighog.repl.co/2022/06/image-20220609201714432.png" alt="image-20220609201714432"></p><h1 id="仓库介绍："><a href="#仓库介绍：" class="headerlink" title="仓库介绍："></a>仓库介绍：</h1><p>这个仓库是用来在 Docker 上跑 Macos 的，当前仓库文件 <code>18.8G</code> 默认系统为 <code>macos-mojave</code></p><p>将本仓库下载至你的 Linux&#x2F;Ubuntu 本地后，确认 <code>docker-compose.yml</code> 中的内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">macos:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">macos</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">macos</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">taylorcoffelt/macos-docker</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYSTEM_DISK=MyDisk.qcow2</span> <span class="comment">#系统盘：默认 18.8G/64G</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HEADLESS=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MEM=2G</span> <span class="comment">#运行内存</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CPUS=4</span> <span class="comment">#CUP核心数</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPICE=1</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment">#开放的端口 ( 容器外部 : 容器内部 )</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5900:5900&quot;</span> <span class="comment">#5900 VNC 端口 tcp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5930:5930&quot;</span> <span class="comment">#5930 SPICE remote-viewer 端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5922:22&quot;</span> <span class="comment">#5922 MAC 中的远程端口</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment">#需要挂载的 盘/文件夹</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp/macos/MyDisk.qcow2:/macostools/MyDisk.qcow2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./BaseSystem.img:/macostools/BaseSystem.img</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./ESP.qcow2:/macostools/ESP.qcow2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./firmware:/macostools/firmware</span></span><br><span class="line">    <span class="comment">#以上四个盘的文件请对照自己本地路径更改</span></span><br><span class="line">    <span class="comment">#冒号规则和PORT一样 冒号前是你容器外部的文件路径</span></span><br><span class="line">    <span class="comment">#这四个盘和挂载的文件夹请别乱删，很有可能删了开不了机(</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment">#永远会重启 (手动停止不会)</span></span><br></pre></td></tr></table></figure><p>确认完毕后，使用 docker-compose up 启动 -&gt;</p><p>打开 VNC 客户端，输入你的 Linux&#x2F;Ubuntu 公网ip:5900 连接 Macos</p><p>如果你的机器没有公网IP，这里推荐 zerotier 内网穿透。</p><h1 id="目录文件介绍："><a href="#目录文件介绍：" class="headerlink" title="目录文件介绍："></a>目录文件介绍：</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> firmware           macos协议文件</span><br><span class="line"><span class="bullet">-</span> docker-compose.yml docker启动文件</span><br><span class="line"><span class="bullet">-</span> Dockerfile         docker启动文件</span><br><span class="line"><span class="bullet">-</span> ESP.qcow2          boot启动文件</span><br><span class="line"><span class="bullet">-</span> headless.sh        环境启动文件</span><br><span class="line"><span class="bullet">-</span> MyDisk.qcow2       macos硬盘储存</span><br><span class="line"><span class="bullet">-</span> BaseSystem.img     macos镜像文件</span><br></pre></td></tr></table></figure><h1 id="进阶教程："><a href="#进阶教程：" class="headerlink" title="进阶教程："></a>进阶教程：</h1><p>第一次启动后的镜像约为 18.8G ，你也可以使用指令创建新的macos硬盘储存 64G</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 MyDisk.qcow2 64G</span><br></pre></td></tr></table></figure><p>然后进系统，格式化(擦除)这个硬盘，重新释放安装macos镜像文件。</p><p>本仓库内容参考：</p><ul><li><a href="https://github.com/sickcodes/Docker-OSX">https://github.com/sickcodes/Docker-OSX</a></li><li><a href="https://github.com/taylorcoffelt/macos-docker">https://github.com/taylorcoffelt/macos-docker</a></li><li><a href="https://github.com/foxlet/macOS-Simple-KVM">https://github.com/foxlet/macOS-Simple-KVM</a></li></ul><p>你也可以 <code>git clone macOS-Simple-KVM</code> 后 手动构建其他Macos镜像：</p><p>参数：<code>--high-sierra</code>  <code>--mojave</code>  <code>--catalina</code> 例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jumpstart.sh --mojave</span><br></pre></td></tr></table></figure><p>本仓库永久链接：<a href="https://pigeonpig-my.sharepoint.com/:f:/g/personal/drive_pigeonpig_onmicrosoft_com/EvVTi8ryKTZHju-LGrWlgGABSjTgKj7KPRmmhOJ2jqSViw?e=iu4eq3">https://pigeonpig-my.sharepoint.com/:f:/g/personal/drive_pigeonpig_onmicrosoft_com/EvVTi8ryKTZHju-LGrWlgGABSjTgKj7KPRmmhOJ2jqSViw?e=iu4eq3</a></p><p>理论永久链接：<a href="https://alist.learnonly.xyz/!Macos">https://alist.learnonly.xyz/!Macos</a></p><p>MyDisk.qcow2直链：<a href="https://alist.learnonly.xyz/d/!Macos/MyDisk.qcow2">https://alist.learnonly.xyz/d/!Macos/MyDisk.qcow2</a></p><p>文章备份：<a href="https://b1og.learnonly.xyz/article/01VC3T5Y5FJHPGYLBE4JHYW4UYZIXLH47W">https://b1og.learnonly.xyz/article/01VC3T5Y5FJHPGYLBE4JHYW4UYZIXLH47W</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用xdotool在Ubuntu自动化</title>
      <link href="/p/15af.html"/>
      <url>/p/15af.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>最近在白嫖某平台的云代码空间（ 想整成服务器&#x2F;搭点东西玩，由于是代码空间平台本意肯定是给开发者云跑云测试用的，所以在不写代码 &#x2F; 不干活的时候会睡觉，节省资源。这里写个使用 xdotool 工具来自动写代码（ 当然不保证可以一直白嫖，只是做个记录。</p><h1 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xdotool</span><br></pre></td></tr></table></figure><p>安装 xdotool 包，在这之前可以更新一下 apt <code>apt update</code> <code>apt upgrade</code></p><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><p>最重要的指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xdotool search --name [name of the window] key [keys to press]</span><br></pre></td></tr></table></figure><p>由于 xdotool 是命令行工具，在不指定 <strong>窗口</strong> 的情况下，会默认在当前命令行执行自动化（当然你有桌面UI的话可以用xdotool控制鼠标，但是也挺麻烦）</p><p>这条指令的意思是 xdotool 搜索 窗口名字为 xxx 的程序 执行 按键 keyxxx 栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xdotool search --name code key <span class="string">&quot;ctrl+s&quot;</span></span><br></pre></td></tr></table></figure><p>这条指令的意思是 xdotool 搜索 窗口名字为 code 的程序 执行按键 ctrl+s </p><p>使用 xdotool 可以操控鼠标，按键等，详细可以看 xdotool help，下面是我自己用的一个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">pid_list=`xdotool search <span class="string">&quot;code&quot;</span>`</span><br><span class="line"><span class="comment">#获取窗口名为code的程序pid存为变量</span></span><br><span class="line">main=`<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>`</span><br><span class="line"><span class="built_in">date</span>=`<span class="built_in">date</span> +%s%N | <span class="built_in">md5sum</span> |<span class="built_in">cut</span> -c 1-9`</span><br><span class="line">rad=`<span class="built_in">head</span> /dev/urandom |<span class="built_in">cksum</span> |<span class="built_in">md5sum</span> |<span class="built_in">cut</span> -c 1-9`</span><br><span class="line"><span class="comment">#以上为指定变量，获取一些时间和随机值作为下面键入的内容</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$pid_list</span> </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">name=`xdotool getwindowname <span class="string">&quot;<span class="variable">$i</span>&quot;</span>`</span><br><span class="line"><span class="comment">#获取指定pid的窗口名（完整）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="comment">#输出pid值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="comment">#输出窗口名</span></span><br><span class="line"><span class="built_in">id</span>=<span class="variable">$i</span></span><br><span class="line"><span class="comment">#指定id变量为pid（ 这里有点重复了晚点修</span></span><br><span class="line">xdotool windowfocus <span class="variable">$id</span> </span><br><span class="line"><span class="comment">#使用 xdotool 聚焦到指定id的窗口（一次）</span></span><br><span class="line">xdotool key <span class="string">&quot;ctrl+a&quot;</span></span><br><span class="line"><span class="comment">#使用 xdotool 执行按键 ctrl+a </span></span><br><span class="line">xdotool  <span class="built_in">type</span>  <span class="variable">$main</span>+<span class="variable">$name</span></span><br><span class="line"><span class="comment">#使用 xdotool 键入值 $main+$name</span></span><br><span class="line">xdotool key <span class="string">&quot;Return&quot;</span></span><br><span class="line"><span class="comment">#使用 xdotool 执行按键 Return</span></span><br><span class="line">xdotool  <span class="built_in">type</span>  <span class="variable">$id</span>+<span class="variable">$rad</span></span><br><span class="line"><span class="comment">#使用 xdotool 键入值 $id+$rad</span></span><br><span class="line">xdotool key <span class="string">&quot;Return&quot;</span></span><br><span class="line"><span class="comment">#使用 xdotool 执行按键 Return</span></span><br><span class="line"><span class="built_in">sleep</span> 3</span><br><span class="line"><span class="comment">#休息三秒，这里代码空间有Copilot</span></span><br><span class="line">xdotool key <span class="string">&quot;Tab&quot;</span></span><br><span class="line"><span class="comment">#使用 xdotool 执行按键 Tab 补全Copilot想写的</span></span><br><span class="line">xdotool key <span class="string">&quot;Return&quot;</span></span><br><span class="line"><span class="comment">#使用 xdotool 执行按键 Return</span></span><br><span class="line"><span class="built_in">sleep</span> 3</span><br><span class="line"><span class="comment">#休息三秒让Copilot想想怎么写</span></span><br><span class="line">xdotool key <span class="string">&quot;Tab&quot;</span></span><br><span class="line"><span class="comment">#使用 xdotool 执行按键 Tab 补全Copilot想写的</span></span><br><span class="line">xdotool key <span class="string">&quot;Return&quot;</span></span><br><span class="line"><span class="comment">#使用 xdotool 执行按键 Return</span></span><br><span class="line">xdotool  <span class="built_in">type</span>  <span class="variable">$date</span></span><br><span class="line"><span class="comment">#使用 xdotool 键入值 $date</span></span><br><span class="line"><span class="built_in">sleep</span> 3</span><br><span class="line"><span class="comment">#休息三秒让Copilot想想怎么写</span></span><br><span class="line">xdotool key <span class="string">&quot;Tab&quot;</span></span><br><span class="line"><span class="comment">#使用 xdotool 执行按键 Tab 补全Copilot想写的</span></span><br><span class="line">xdotool key <span class="string">&quot;ctrl+s&quot;</span></span><br><span class="line"><span class="comment">#使用 xdotool 执行按键 ctrl+s 保存</span></span><br><span class="line"><span class="built_in">sleep</span> 10</span><br><span class="line"><span class="comment">#休息 10 秒，上面的sleep值看你Copilot要想多久</span></span><br><span class="line">xdotool key <span class="string">&quot;Tab&quot;</span></span><br><span class="line"><span class="comment">#使用 xdotool 执行按键 Tab 补全Copilot想写的</span></span><br><span class="line">xdotool key <span class="string">&quot;ctrl+s&quot;</span></span><br><span class="line"><span class="comment">#使用 xdotool 执行按键 ctrl+s 保存</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$id</span></span><br><span class="line"><span class="comment">#输出一下pid（没啥用）当然你Copilot想不出来也没关系</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>以上执行时最好啥也不动，因为只聚焦一次到指定pid的窗口。可以另外用 <code>while</code> 循环以上命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">sh auto.sh</span><br><span class="line"><span class="built_in">echo</span> happy <span class="built_in">sleep</span></span><br><span class="line"><span class="built_in">sleep</span> 5</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>执行 auto.sh (栗子文件名) 然后执行这个 <code>while</code> 文件就能一直在窗口中自动写代码了。</p><p>当然你可以设定一些变量值，让 Copilot 写“真实”代码，不过一般写出来的会是一样的，我这里用的是随机，有的时候 Copilot 想不出来，不过没关系。</p><p>当然在执行自动化之前，你得把浏览器，及想要自动化的窗口准备好（这个准备也完全可以python自动化）但是我不会，也不太想学，大家可以自己拓展。以下是一些常用补充：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xdotool key ctrl+s BackSpace <span class="comment">#点击ctrl+s，然后是BackSpace键</span></span><br><span class="line">xdotool search --name chrome key ctrl+c <span class="comment">#在名为chrome的窗口上点击ctrl+c</span></span><br><span class="line">xdotool getactivewindow <span class="comment">#获取当前激活的窗口</span></span><br><span class="line">xdotool getactivewindow windowmove 10 10 <span class="comment">#移动当前窗口位置</span></span><br><span class="line">xdotool mousemove_relative 10 10 <span class="comment">#鼠标相对移动</span></span><br><span class="line">xdotool mousemove_relative --<span class="built_in">sync</span> 10 10 <span class="comment">#异步鼠标相对移动</span></span><br><span class="line">xdotool mousemove x y click 1 <span class="comment">#鼠标移到(x,y)左键 值1是左键 2滚轮中键 3是右键</span></span><br><span class="line">xdotool getmouselocation <span class="comment">#获取鼠标位置</span></span><br><span class="line"> <span class="built_in">eval</span> $(xdotool getmouselocation --shell) <span class="comment">#获取鼠标位置（可以被引用</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$X</span>,<span class="variable">$Y</span></span><br></pre></td></tr></table></figure><p>文章备份：<a href="https://b1og.learnonly.xyz/article/01VC3T5YZGWKFFLGLKERFLPZXDMSQ4TITA">https://b1og.learnonly.xyz/article/01VC3T5YZGWKFFLGLKERFLPZXDMSQ4TITA</a></p><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>有些东西测试好了再去生产环境执行！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何看待大学生跟风似的考公？</title>
      <link href="/p/b147.html"/>
      <url>/p/b147.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><p>作者：那你说我该叫什么<br>问题：如何看待大学生跟风似的考公？<br>链接：<a href="https://www.zhihu.com/question/526563863/answer/2496316003">https://www.zhihu.com/question/526563863/answer/2496316003</a><br>来源：知乎（原文已被删除）<br>相同回答：怎么评价《致还在沉睡的大学生：你不失业，天理难容》这篇文章?<br>链接：<a href="https://www.zhihu.com/question/30796720/answer/2496276048">https://www.zhihu.com/question/30796720/answer/2496276048</a><br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><hr><h2 id="因为他们彻底的结构性失业了。"><a href="#因为他们彻底的结构性失业了。" class="headerlink" title="因为他们彻底的结构性失业了。"></a>因为他们彻底的结构性失业了。</h2><p>我要说一句，当代绝大部分的大学生，都是政策的牺牲品，糊里糊涂的学了一个自己都不知道是人是鬼的专业，我可没在开玩笑。</p><p>把大学生们毁掉的政策，叫人才扩招</p><p>实际上这玩意不仅毁掉了大学生，它已经毁掉了大部分年轻人。</p><p>—————————————————————</p><p>我曾经好奇一件事情，为什么发达国家的大学生比例如此的低呢，</p><p>比如美国，只有不到35%的高中生完成了大学教育（约为1&#x2F;3）</p><p>注意，这个大学教育是包括“<a href="https://www.zhihu.com/search?q=%E6%8A%80%E5%B7%A5%E5%AD%A6%E6%A0%A1&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2496316003%7D">技工学校</a>”的，也就是专科本科都算上，加起来也就35%的高校生完成了。</p><p>而我国本科加大专加起来，能把高校生快包饺子了。</p><p>是我们的政策制度有什么优势，能鼓励人们去进行高等教育么？</p><p>后来我懂了，这就纯纯的劣势。</p><p>这一切的起因，都是无原则“扩招”，我们这些泛滥的大学生，出现的根本原因不是我们好学，是我们不得不上大学。</p><p>—————————————————————</p><p>当年我们发现国家缺少高技术人才，那就招呗。</p><p>但是却没有人去计算，这个社会到底需要多少大学生。政策只是无脑的直接放开所有的招募，广收人数，不考虑买方市场的需求，一股脑的爆增量。</p><p>另外也有可能在靠这个爆房价拉消费，当然这是另说。</p><p>结果呢，本科学生人数爆炸了，实际人数远远超过了社会所需要的数量，这就是一切恶果的起爆点。</p><p>因为本科学生爆炸了，那些应该由本科毕业去做的工作岗位根本不足以容纳这么多人，结果就出现了大批“失业本科毕业生”。</p><p>然后这事怎么处理的呢？好办啊，把那些原本高中毕业就能干的活，加个“相关专业本科以上”不就行了。</p><p>天知道是哪群人想的这断子绝孙招。</p><p>一道硬杠，把那些没上本科的“耗材”砍掉，腾出位置来给这群失业的本科毕业生救火。你说高中毕业的怎么办？你不还有技校可以念书么？接着念去吧。</p><p>就这样，巨量的高中毕业就能做的职务，比如片警，中介，低端销售，都变成了本科限定。</p><p><img src="https://pic1.zhimg.com/50/v2-eff1c867621d1fd4b809ff292e8fccb3_720w.jpg?source=1940ef5c" alt="img"></p><p>最后就连保安，都是本科限定了，我就不懂了，高中生毕业和本科生毕业，去当保安有区别么？</p><p>然后你别说，这职位，好几百人去应聘。</p><p>—————————————————————</p><h2 id="你以为这就完了？当然没有！"><a href="#你以为这就完了？当然没有！" class="headerlink" title="你以为这就完了？当然没有！"></a>你以为这就完了？当然没有！</h2><p>因为这种情况，导致，你没有大专证，连应聘个超市服务员都费劲了，那咋办，考考考都给老子考，考不上复读再考，考上了去念。</p><p>毕竟学历很重要（摊手），有学历总比没有强。</p><p>但是这一点，埋下了一个大雷，直接让我国的本科教育相对外国质量低了很多。</p><p>—————————————————————</p><p>这就是，学生的主观能动性！</p><p>咱们说，一个人，他一辈子最适合试错的时间点是什么时间？</p><p>答案：18—28</p><p>十年。</p><p>十八岁的时候，一个人心智健全了，而到二十八之前，一般父母四十多岁身体健康没啥负担，而且这段时间的人精力充沛，也不太忙着组建家庭，正是去找自己未来的大好日子。</p><p>欧美国家的学生，很多都会在高中毕业后出来工作，在工作了几年后，确认自己想要从事的职业与方向后，再去考取相应的本科学历，也就是深造。</p><p>对！这才是大学的真正意义！</p><p>在一个人确认了自己想要从事的职业和领域，并愿意为之主动学习的时候，再去考取相关的高等教育，然后在四年大学时间中主动去强化这些领域的技能！</p><p>大学学历，在外国被叫做“高等教育”，本身就不是年轻人必备的证书</p><p>所以为什么欧美学生大学退学很常见？因为一旦他们发现自己对于该领域其实并没有那么感兴趣，他们就不会浪费时间呆在里面熬了，而是直接退学出去找工作。</p><p>这才是大学真正的使用方式。</p><p>在你尚且年轻，十八九岁的时候出去寻找方向，找到后在大学提高自己。</p><p>所以人家的大学学士能力那么强，因为每一个进到大学里的学生，都是确确实实知道自己要什么的。</p><p>人家的大学里，毕业就转行，毕业出来考公务员，那是非常罕见的行为，因为不想干的早西八退学了，谁跟你在这互相恶心四年？</p><p>可是我们呢？</p><p>我们才不是，我们中的绝大部分人是因为不考学就没任何工作，只能去考。考了之后甚至都不知道自己选什么专业，就随随便便对付一个专业了事。</p><p>那大部分稀里糊涂选专业的，能有主观能动性么，能学好么，能自愿学习么。</p><p>可是不考咋办，欧美人家18岁想做警察的可以去警察局实习，想做金融的可以应聘银行实习生，我们18岁只能去体验普工生活。</p><p>本科泛滥，已经让社会不愿意分一丁点资源给高校学生尝试方向了。</p><p>考，都去考！</p><p>—————————————————————</p><p>更可怕的是，就在这些本科学习中，学生们宝贵的择业年华被浪费掉了。</p><p>为什么大家现在去一股脑报考公务员？</p><p>本质还是因为本科泛滥</p><h2 id="人有四业，士农工商。"><a href="#人有四业，士农工商。" class="headerlink" title="人有四业，士农工商。"></a>人有四业，士农工商。</h2><p>士就是公务员</p><p>农就是房东，这个需要拼爹咱们先不说</p><p>工就是技工，挖机大厨吊车师傅这都是</p><p>商就是做买卖了。</p><p>这四业是要在很早就开始择业的。</p><p>如果你18岁出去，两年后，发现自己挺喜欢机械，你二十开始学钩机考证件，学厨子，学美发，完全来得及。这些行业干好了也是一碗好饭。</p><p>愿意做买卖的，十八九岁去当个职员，销售技巧待人接物，会计技术，开车。直接对着自己要做的买卖领域<a href="https://www.zhihu.com/search?q=%E7%89%B9%E5%8C%96&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2496316003%7D">特化</a>技能就行了，到了二十三四二十四五，就是一把好手</p><p>可你本科毕业了，22岁出去，两年后，你发现自己不想做这个行业，或者这行业没人脉压根就不好做，你。。。。。。</p><p>你除了考公务员还能干啥，除非你家有亲戚愿意带你，不然谁愿意带个奔三的白丁入行？</p><p>不开玩笑，我有个朋友就是，本科学的古董拍卖还是个什么玩意，毕业后才知道。</p><p>如果你家不是做这行买卖的，也没有这行业的人脉，那你有毕业证有学历有从业证屁用没有，就是学了个假的，拍个上世纪尿壶都没人找你。</p><p>那这事，当时她18岁报考的时候鬼知道啊？</p><p>那怎么办，转行公务员呗。</p><p>扩招让市场直接拉高全部工作的硬杠，</p><p>硬杠直接踩死高中毕业倒逼全员“强制”高等教育，</p><p>强制高等教育让所有学生都付出了巨大的时间成本去读一个长达四年的，自己压根不了解的职业领域，造成主观能动性极差，都在“沉睡”</p><p>这批觉皇本科生毕业了出去，又再次大面积失业。自己的专业不想干，转行被“相关专业”卡死，哪怕谁都知道那所谓的相关专业，很多往往是高中生俩月也能学会的。但人家不要啊，实习都不要。</p><p>就全都去卷公务员，要不就是跑房产销售，毕竟都不傻，谁去给你死亡流水线当牛马去？</p><p>不过还的说，我就纳闷了，这破房产销售需要个本科学位干什么？</p><p>—————————————————————</p><p>然后上头怎么处理的这一波大失业？</p><p>嘿？他们去卷研究生了，这会是把高中毕业能干的活提到研究生的硬杠，你们接着考去吧，待考不算失业。</p><p>然后宣传本科生也可以当普工。</p><p>重新复刻过去的路是吧，再过二十年是不是研究生才能当保安，本科生只配流水线，博士才能考公务员。</p><p><img src="https://pic2.zhimg.com/50/v2-3aba7de277c483c83dd29ffcbb5f2e83_720w.jpg?source=1940ef5c" alt="img"></p><p>—————————————————————</p><p>现在需要的不是一味地宣传什么本科生你们醒醒吧，大学生你们不能睡。</p><p>而是把那些社会上乱七八糟的硬杠降下来，让那些高中毕业就能干的活真的肯要高中毕业的，给年轻人尚且年轻的时候，一两年择业的机会。</p><p>而不是现在这样赶鸭子上架，全部工作都加个学历硬杠，年轻人小学初中高中大学一路被赶鸭子下来，大学毕业找工作就开始催婚，催完了催孩子，孩子出来了。</p><p>好么，再无回头路，努力赚钱养娃去吧！你的这辈子已经结束了！</p><p>打4岁进了幼儿园，到TMD45岁孩子长大，中国“年轻人”甚至都没有一两年的时间去思考自己到底适合做什么，愿意做什么，整个都在疲于奔命的完成早就被设定好的任务。</p><p>而本科学历，研究生学历，对于大部分毕业生而言根本不是敲门的金砖，已经变成了时代的眼泪和负重的枷锁。</p><p>学历牛不牛，牛啊，可是六年特化实战从业经验，在绝大部分工作领域绝对把学历证吊起来打你信不。</p><p>这道枷锁扣住了他们最宝贵的6—7年试错机会，关死了他们转行的绝大部分希望。等你毕业已经25，出来后再发现自己并不适合这个行业的时候，除了拿起考公的笔，就没啥别的选择了，一生全部的选项都在一片狼藉中就被浪费掉了，家长还在TMD催婚催娃打算给你套上新的小夹板。</p><p>—————————————————————</p><h2 id="所以这事情有解么？"><a href="#所以这事情有解么？" class="headerlink" title="所以这事情有解么？"></a>所以这事情有解么？</h2><p>没有，因为不是什么事情都能有回头路的</p><p>已成之事，不可逆了，我们只能看着这辆失控的列车狂奔下去了，天知道它会在哪里把自己撞烂。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 知乎 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GithubAction给任意网页截图</title>
      <link href="/p/799e.html"/>
      <url>/p/799e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>最近白嫖 <a href="https://github.com/stars/valetzx/lists/replit">Replit</a> 的时候发现了一个能在 vercel 部署的网页截图程序：<a href="https://github.com/valetzx/websnap">valetzx&#x2F;websnap</a> 可以将网页截图并展示 <a href="https://github.com/valetzx/websnap">DEMO</a> 以下截图是该程序为本页生成的实时渲染。但是这个程序有个非常不友好的BUG就是截图网页中有中文时，中文会被渲染成方框，简单来说就是（ 缺 字 体 ）可是 vercel 的环境非常封闭?比较难去添加字体给系统。</p><p><img src="https://websnap.vercel.app/blog.learnonly.xyz/p/799e.html/?key=QQ550029691"></p><p>那为什么不用 <code>iframe</code> 标签呢？整个网页的渲染相比图片还是比较吃力的，我们完全可以把渲染交给服务器。并且网页截图能做更多东西，比如网页快照等等等等（图片是可以永久保存的）而 <code>iframe</code> 是真实时。</p><p>当时我的朋友 <a href="https://github.com/zkeq">zkeq</a> 也照着写了个Python程序：<a href="https://github.com/zkeq/Python-WebSite-Screenshot">zkeq&#x2F;Python-WebSite-Screenshot: 一款支持截图中文网站的 Actions 截图工具</a> 使用GithubAction的好处在于，我们可以给整个系统添加中文，并且保存图片到仓库。当然也有缺点，比如不能 <code>实时</code> 渲染图片了。</p><p><img src="https://socialify.git.ci/zkeq/Python-WebSite-Screenshot/image?description=1&font=Bitter&forks=1&language=1&owner=1&pattern=Plus&stargazers=1&theme=Dark"></p><p>当然这个程序的使用非常的简单，下图是本文章的截图（来自GithubRaw）：</p><p><img src="https://github.com/valetzx/AutoWebSnap/raw/main/source/gallery/snap/2022-05-07_11-48-24.png"></p><h1 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h1><ol><li>准备一个 Github 账号</li><li>转到 <a href="https://github.com/zkeq/Python-WebSite-Screenshot">zkeq&#x2F;Python-WebSite-Screenshot</a> 点 <code>Fork</code> 到你的仓库</li></ol><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><ol><li>在 <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a> 生成个人 <code>Access Token</code> 并且赋予 <code>repo</code> 权限</li><li>环境变量 <code>Name</code> 为 <code>MY_GIT_TOKEN</code> &#x2F;  <code>Value</code> 填 上方生成的  <code>Access Token</code></li></ol><p><img src="https://img.pighog.repl.co/2022/05/image-20220507195716274.png" alt="image-20220507195716274"></p><ol start="3"><li>在你仓库的 <code>list.json</code> 中填入你想生成截图的网站。示例格式：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://alist.learnonly.xyz&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;real_time_out&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">1920</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;daydel&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>url</code></td><td>网站网址</td></tr><tr><td><code>timeout</code></td><td>sele 模块中等待时间，加载出网站后会停止（秒）</td></tr><tr><td><code>real_time_out</code></td><td>强制等待时间，在上述 timeout 后休眠时间（秒）</td></tr><tr><td><code>width</code></td><td>截图宽度</td></tr><tr><td><code>height</code></td><td>截图高度</td></tr><tr><td><code>daydel</code></td><td>截图的保存时间（天）</td></tr></tbody></table><ol start="4"><li>完成后，可以到 Actions 页，点击 Run workflow 进行测试。</li></ol><p><img src="https://img.pighog.repl.co/2022/05/image-20220507201618784.png" alt="image-20220507201618784"></p><h1 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h1><p>你可以自己查看并修改 GithubAction 中的内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;30 */3 * * *&#x27;</span></span><br><span class="line">  <span class="attr">watch:</span></span><br><span class="line">    <span class="attr">types:</span> [<span class="string">started</span>]</span><br></pre></td></tr></table></figure><p>茹 <code>cron: &#39;30 */3 * * *&#39;</code> 设置定时触发（相当于定时监控，访问网站）生成截图！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">mdimgh=<span class="string">&quot;![](&quot;</span></span><br><span class="line">gitraw=<span class="string">&quot;https:\/\/raw.githubusercontent.com\/valetzx\/AutoWebSnap\/main\/&quot;</span></span><br><span class="line">mdimgb=<span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line">find save -<span class="built_in">type</span> f -name <span class="string">&quot;*.png&quot;</span> &gt; name.md</span><br><span class="line">sed <span class="string">&quot;/./&#123;s/^/![](<span class="variable">$gitraw</span>&amp;/;s/$/&amp;<span class="variable">$mdimgb</span>/&#125;&quot;</span> name.md &gt; index.md</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> AutoWebSnap View At https://pighog.vercel.app/gallery/snap &gt; README.md</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;1 i\&#123;% gallery %&#125;&#x27;</span> index.md</span><br><span class="line">sed -i <span class="string">&#x27;/&#123;% gallery %&#125;/i\\&#x27;</span> index.md</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;1 i\---&#x27;</span> index.md</span><br><span class="line">sed -i <span class="string">&#x27;1 i\top_img: https://bing.icodeq.com &#x27;</span> index.md</span><br><span class="line">sed -i <span class="string">&#x27;1 i\swiper_cover: &#x27;</span> index.md</span><br><span class="line">sed -i <span class="string">&#x27;1 i\swiper_desc: &#x27;</span> index.md</span><br><span class="line">sed -i <span class="string">&#x27;1 i\swiper_index: 996&#x27;</span> index.md</span><br><span class="line">sed -i <span class="string">&#x27;1 i\type: &quot;gallery&quot; &#x27;</span> index.md</span><br><span class="line">sed -i <span class="string">&#x27;1 i\date: 2022/05/06 &#x27;</span> index.md</span><br><span class="line">sed -i <span class="string">&#x27;1 i\title: 网页快照&#x27;</span> index.md</span><br><span class="line">sed -i <span class="string">&#x27;1 i\---&#x27;</span> index.md</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;$a\&#123;% endgallery %&#125;&#x27;</span>  index.md</span><br></pre></td></tr></table></figure><p>这个是我自己写的，生成可以让<code>hexo</code>相册读取的index.md文件，大家可以看着改</p><p>可以在我博客的 <a href="https://pighog.vercel.app/gallery/snap">相册</a> 预览仓库中的网页截图（有些许延迟，来自GithubRaw）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">daydel=$(<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d&quot;</span> -d <span class="string">&quot;-8 day&quot;</span>)</span><br><span class="line">find save -<span class="built_in">type</span> f -name <span class="string">&quot;*<span class="variable">$daydel</span>*.png&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \; </span><br></pre></td></tr></table></figure><p>你可以在 Action 的 yml-run 中添加以上两行来删除<code>&quot;-8 day&quot;</code>天前生成的照片</p><h1 id="彩蛋："><a href="#彩蛋：" class="headerlink" title="彩蛋："></a>彩蛋：</h1><p>小彩蛋（ 你会发现你每次刷新这篇文章的时候，封面图与下面第一张预览截图都不一样。</p><p><img src="https://img.pighog.repl.co/2022/05/image-20220507202051078.png" alt="image-20220507202051078"></p><p>文章备份：<a href="https://b1og.learnonly.xyz/article/01VC3T5Y5PO6A6B2CFSBF2JL7PGMV3GMYX">https://b1og.learnonly.xyz/article/01VC3T5Y5PO6A6B2CFSBF2JL7PGMV3GMYX</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> 教程 </tag>
            
            <tag> GithubAction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Graph获取微软永久客户端秘钥</title>
      <link href="/p/34c.html"/>
      <url>/p/34c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>现在微软客户端秘钥client_secret有效期24个月，但是还是可以获得永久的secret的。方便一次设置 永久（理论）续订！</p><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><ol><li>打开 <a href="https://developer.microsoft.com/en-us/graph/graph-explorer">https://developer.microsoft.com/en-us/graph/graph-explorer</a></li><li>点最左边蓝色 <code>Sign in to Graph Explorer</code> 登录</li><li>右边 框框 <code>Modify permissions (Preview)</code> 将所有权限<code>√</code>同意</li><li>左侧栏，<code>Applications (8)</code> ，下面找到绿色的<code>POST</code> ，有两个，选择，<code>create a new application</code> ，双击就会在右侧呈现（创建新应用程序）</li><li>打开 <a href="https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">应用注册</a> 选择想获取永久秘钥的应用程序，复制<code>对象ID</code> 不是client_id！不是 应用程序(客户端)ID！是 对象ID！</li><li>再回到Graph Explorer，将POST的URL地址替换为 <code>https://graph.microsoft.com/v1.0/applications/你的对象ID/addPassword</code> </li><li>将 <code>Request body</code> 中内容删除，替换为：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;passwordCredential&quot;: &#123;</span><br><span class="line">&quot;displayName&quot;: &quot;你想要给密钥添加的描述&quot;,</span><br><span class="line">&quot;endDateTime&quot;: &quot;9999-12-31T00:00:00Z&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>最后，点击 <code>Run query</code>，得到的结果里面的<code>secretText</code>的值就是“永久密钥”啦！</li></ol><p><img src="https://img.pighog.repl.co/2022/04/image-20220430213929444.png" alt="image-20220430213929444"></p><p><img src="https://img.pighog.repl.co/2022/04/image-20220430213936478.png" alt="image-20220430213936478"></p><h1 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h1><p>请注意！<code>对象ID</code> 应该在 <code>应用注册</code> 选项中的 <code>概述</code> 面板中获取，而不是 <code>企业应用程序</code> 面板的 对象ID 这俩东西不一样！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Replit中自建监控网站</title>
      <link href="/p/c99d.html"/>
      <url>/p/c99d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>废话不多说，这篇文章胶凝在replit上白嫖一个网站监控，并设置企业微信通知。</p><p>本次一键部署资源可以在我的仓库Star获取：<a href="https://github.com/stars/valetzx/lists/replit">valetzx starlist replit </a></p><h1 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h1><p>注册 <a href="https://replit.com/">Replit</a>，准备好教育仓库。</p><p>这里要用到nodejs监控，和Python企业微信通知</p><p>浏览仓库：<a href="https://github.com/louislam/uptime-kuma">louislam&#x2F;uptime-kuma</a> 监控主程序</p><p>浏览仓库：<a href="https://github.com/easychen/wecomchan">easychen&#x2F;wecomchan</a> 微信通知</p><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><p>转到仓库：<a href="https://github.com/valetzx/uptimekumaonreplit">在replit自建uptime-kuma监控 (github.com)</a> 一键部署监控主程序。</p><p>注意！！！第一次运行成功后请注释掉 <code>main.sh</code> 文件中的 <code>git clone</code> 命令！！！</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220423145822141.png" alt="image-20220423145822141"></p><p>在教育仓库中新建Python项目，将uptimekumaonreplit仓库中的 <code>main.py</code> 粘贴至Python项目仓库中。在运行前执行 <code>pip install python-multipart</code> 指令。</p><ul><li><code>main.py</code> 来自 Zkeq <a href="https://github.com/zkeq">Github</a> &#x2F; <a href="https://icodeq.com/">Blog</a></li></ul><p><img src="https://img.pighog.repl.co/2022/04/image-20220423143749287.png" alt="image-20220423143749287"></p><p>在补全企业微信相应信息后，点顶部绿色 Run，运行通知服务。</p><p>当Python通知程序成功运行后，复制你的 <a href="https://xxxx.xxxx.repl.co/">https://xxxx.xxxx.repl.co</a></p><p><img src="https://img.pighog.repl.co/2022/04/image-20220423144258748.png" alt="image-20220423144258748"></p><p>粘贴至一开始部署好的 监控主程序 仓库中的 <code>pushbullet.js</code> 文件中。</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220423145120181.png" alt="image-20220423145120181"></p><p>将你的 <code>pushbullet.js</code> 替换 <code>./uptime-kuma/server/notification-providers/pushbullet.js</code> </p><p><img src="https://img.pighog.repl.co/2022/04/image-20220423145400484.png" alt="image-20220423145400484"></p><p>最后 如果之前运行的没停就点Stop 反正就是重新跑一遍Run。</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220423145632081.png" alt="image-20220423145632081"></p><p>出现xxxxxx什么什么已拒绝连接是正常现象，uptime-kuma不允许跨域。</p><p>配置uptime-kuma通知：</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220423150456630.png" alt="image-20220423150456630"></p><p>打开你的 uptime-kuma 转到 <code>设置-通知</code> 设置通知。</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220423150608163.png" alt="image-20220423150608163"></p><p>如果要设置企业微信应用程序通知就选择 <code>Pushbullet</code> </p><p><img src="https://img.pighog.repl.co/2022/04/image-20220423150758369.png" alt="image-20220423150758369"></p><p>显示名称 随便写 Access Token 随便写 填好后点 测试按钮。当企业微信出现通知后保存。测试成功通知为：Uptime Kuma Alert Testing Successful.</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220423151020723.png" alt="image-20220423151020723"></p><p>文章备份：<a href="https://b1og.learnonly.xyz/article/01VC3T5Y5OTPACA6C43NAKPYGKOCQNRRZV">https://b1og.learnonly.xyz/article/01VC3T5Y5OTPACA6C43NAKPYGKOCQNRRZV</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Replit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Replit中配置Nix环境</title>
      <link href="/p/1849.html"/>
      <url>/p/1849.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p><a href="https://pighog.vercel.app/p/aa4a.html">在Replit中白嫖</a> 时，一定会遇到有不能一键部署的环境，那我们如何选择自己想要的环境呢？这里需要用到Replit环境中自带的 <code>replit.nix</code> 文件。<a href="https://nixos.org/">Nix</a> 是什么，我们要怎么使用，下面的文章会解答凝的疑问（</p><h1 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h1><p>其实没什么好准备的，在Replit准备一个Bash环境（理论上任意环境都行），打开仓库后，点文件最右边三个点，点显示隐藏文件，然后仓库根文件夹中会多出 <code>.replit</code> <code>replit.nix</code> 两个文件。我们要使用 <code>replit.nix</code> 配置环境。</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220420121713553.png" alt="image-20220420121713553"></p><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><p>首先 <a href="https://nixos.org/">Nix</a> 是一个包管理器，就像一个软件库，我们可以用 <code>replit.nix</code> 直接使用 Nix 中的软件包。这里用 <a href="https://github.com/spencerwooo/onedrive-vercel-index">onedrive-vercel-index</a> 做演示。</p><p>onedrive-vercel-index 是一个部署在 <a href="https://vercel.com/">vercel</a> 中的文件浏览程序，需要使用到 Next.js（属于vercel），我们可以在 Replit 直接创建 next.js 语言项目。</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220420124304065.png" alt="image-20220420124304065"></p><p>onedrive-vercel-index 还需要用到 Redis 缓存以及 pnpm包管理器。</p><p>我们浏览原始的 <code>replit.nix</code> 文件，查看文件结构，发现他自带node.js16，tsserver，yarn，jest。现在我们需要给他添加 redis 以及 pnpm。</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220420124801826.png" alt="image-20220420124801826"></p><p>打开 <a href="https://search.nixos.org/packages">Nix 搜索</a> redis ，找到自己想要的redis包，点名字展开后，复制包名。</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220420125550617.png" alt="image-20220420125550617"></p><p>返回到 Replit 的 <code>replit.nix</code> 文件。换行后输入包名 <code>pkgs.redis</code> </p><p><img src="https://img.pighog.repl.co/2022/04/image-20220420130608399.png" alt="image-20220420130608399"></p><p>等待 <code>Loading Nix environment...</code> 加载完；</p><p>转到 Shell 中启动 Redis server，可以发现已经安装好了。</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220420130750850.png" alt="image-20220420130750850"></p><p>同理的 pnpm 搜索，复制包名，粘贴：<code>pkgs.nodePackages.pnpm</code> </p><p><img src="https://img.pighog.repl.co/2022/04/image-20220420131521120.png" alt="image-20220420131521120"></p><p><img src="https://img.pighog.repl.co/2022/04/image-20220420131640141.png" alt="image-20220420131640141"></p><p>如果是npm包，请不要漏掉 nodePackages 而且请最好写在 <code>pkgs.nodejs-16_x</code> 下方，并缩进。写好程序的运行脚本，运行后，可以看到onedrive-vercel-index已成功启动并运行了。</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220420132204024.png" alt="image-20220420132204024"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; pkgs &#125;: &#123;</span><br><span class="line">deps = [</span><br><span class="line">pkgs.redis</span><br><span class="line">pkgs.nodejs-16_x</span><br><span class="line">pkgs.nodePackages.typescript-language-server</span><br><span class="line">pkgs.nodePackages.yarn</span><br><span class="line">pkgs.nodePackages.pnpm</span><br><span class="line">pkgs.replitPackages.jest</span><br><span class="line">];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h1><p>以下有两个我自己写好的环境仓库，有兴趣可以参照看一下：</p><h3 id="在-Replit-自动构建-Alist-alistbuildonreplit"><a href="#在-Replit-自动构建-Alist-alistbuildonreplit" class="headerlink" title="在 Replit 自动构建 Alist alistbuildonreplit"></a>在 Replit 自动构建 Alist <a href="https://github.com/valetzx/alist-build-on-replit">alistbuildonreplit</a></h3><p>用到的环境有：go1.18，gcc，vite，nodejs16等</p><h3 id="在-Replit-白嫖3G-MC-服务器-mcserveronreplit"><a href="#在-Replit-白嫖3G-MC-服务器-mcserveronreplit" class="headerlink" title="在 Replit 白嫖3G MC 服务器 mcserveronreplit "></a>在 Replit 白嫖3G MC 服务器 <a href="https://github.com/valetzx/mcserveronreplit">mcserveronreplit </a></h3><p>用到的环境有：jdk17，php80，python等</p><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>有部分网路类型的包，例如 ngrok，zerotier-one 需要用别的方式安装，这里暂时不讲。以及rclone，可以使用，但是不能挂载到本地。后面有空会写，如何使用AriaNg，白嫖replit的服务器网络下载。速度也是肥肠可观的。</p><p><img src="https://img.pighog.repl.co/2022/04/image-20220420133548528.png" alt="image-20220420133548528"></p><p>文章备份：<a href="https://b1og.learnonly.xyz/article/01VC3T5Y2CQ65HLXTYVVAY4YIPSXNPOL6O">https://b1og.learnonly.xyz/article/01VC3T5Y2CQ65HLXTYVVAY4YIPSXNPOL6O</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Replit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Replit白嫖3G MC 服务器</title>
      <link href="/p/cb20.html"/>
      <url>/p/cb20.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p align="center"><body><iframe src="https://video-direct-link.vercel.app/bili.mp4?aid=340750421&bvid=BV1M94y1o72P&cid=578822737" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></body></p><p align="center"><body><iframe src="https://tsvideo.pighog.repl.co"name="iframe_a"frameborder="0"width="100%" scrolling="no" height="600" allowfullscreen="true "></iframe></body></p><p align="center"><body><iframe src="https://chat.pighog.repl.co/room/@main"  width=100% height="200"></iframe></body></p>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> OneDrive </tag>
            
            <tag> 教程 </tag>
            
            <tag> Replit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Replit白嫖各种语言项目</title>
      <link href="/p/aa4a.html"/>
      <url>/p/aa4a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>害呀，家里也疫情刚封了一半了，最近正好在捣鼓 <a href="https://replit.com/">Replit</a> ，这玩意主要是能白嫖，似乎应用没有时间，没有流量限制。能挂很多东西，只是单个仓库的虚拟机配置比较蔡。不过跑跑正经项目肯定是够用的。这里列给大家看一下我挂的项目，下面应该都会写教程。本文在 <a href="https://hexo.pighog.repl.co/p/aa4a.html">Replit</a> 首发哈哈！<br><img src="https://img.pighog.repl.co/2022/04/image-20220417093726604.png" alt="image-20220417093726604"></p><p>Vue3博客，<a href="http://busuanzi.ibruce.info/">Busuanzi</a>计数，<a href="https://hexo.io/">Hexo</a>博客，<a href="https://kodcloud.com/">Kodbox</a>可道云，<a href="https://github.com/qkqpttgf/OneManager-php">OneManager-php</a>，<a href="https://libsgh.github.io/PanIndex">Panindex</a>，<a href="https://alist-doc.nn.ci/">Alist</a> 等等。</p><h1 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h1><p>注册登录 <a href="https://replit.com/">Replit</a> 并创建教育 Team（私有仓库）。<br><img src="https://img.pighog.repl.co/2022/04/image-20220417100205289.png" alt="image-20220417100205289"></p><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><h2 id="在-Replit-中运行Bash项目：Panindex，Alist"><a href="#在-Replit-中运行Bash项目：Panindex，Alist" class="headerlink" title="在 Replit 中运行Bash项目：Panindex，Alist"></a>在 Replit 中运行Bash项目：Panindex，Alist</h2><details class="toggle" style="border: 1px solid bg"><summary class="toggle-button" style="background-color: bg;color: color">使用 Bash 运行Panindex </summary><div class="toggle-content"><h2 id="Panindex-程序预览：https-pan-pighog-repl-co"><a href="#Panindex-程序预览：https-pan-pighog-repl-co" class="headerlink" title="Panindex 程序预览：https://pan.pighog.repl.co/"></a><a href="https://libsgh.github.io/PanIndex">Panindex</a> 程序预览：<a href="https://pan.pighog.repl.co/">https://pan.pighog.repl.co/</a></h2><h3 id="1-在教育Team创建Bash语言项目"><a href="#1-在教育Team创建Bash语言项目" class="headerlink" title="1. 在教育Team创建Bash语言项目"></a>1. 在教育Team创建Bash语言项目</h3><p><img src="https://img.pighog.repl.co/2022/04/image-20220417100343779.png" alt="image-20220417100343779"></p><h3 id="2-下载二进制程序amd64并解压至项目根目录"><a href="#2-下载二进制程序amd64并解压至项目根目录" class="headerlink" title="2. 下载二进制程序amd64并解压至项目根目录"></a>2. 下载二进制程序<code>amd64</code>并解压至项目根目录</h3><h3 id="3-编写-replit-及-main-sh-文件"><a href="#3-编写-replit-及-main-sh-文件" class="headerlink" title="3. 编写 .replit 及 main.sh 文件"></a>3. 编写 <code>.replit</code> 及 <code>main.sh</code> 文件</h3><p><img src="https://img.pighog.repl.co/2022/04/image-20220417102208102.png" alt="image-20220417102208102"></p><h3 id="replit需要点右上角三个点Show显示！检查文件并修改成以下内容！"><a href="#replit需要点右上角三个点Show显示！检查文件并修改成以下内容！" class="headerlink" title=".replit需要点右上角三个点Show显示！检查文件并修改成以下内容！"></a>.replit需要点右上角三个点Show显示！检查文件并修改成以下内容！</h3><h4 id="检查-replit文件："><a href="#检查-replit文件：" class="headerlink" title="检查.replit文件："></a>检查<code>.replit</code>文件：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run = [&quot;bash&quot;, &quot;main.sh&quot;]</span><br><span class="line">entrypoint = &quot;main.sh&quot;</span><br></pre></td></tr></table></figure><h4 id="检查main-sh文件："><a href="#检查main-sh文件：" class="headerlink" title="检查main.sh文件："></a>检查<code>main.sh</code>文件：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span>  +x  PanIndex-linux-amd64</span><br><span class="line">./PanIndex-linux-amd64</span><br></pre></td></tr></table></figure><h3 id="4-编写完成后点顶上绿色-▶-Run-按钮运行。"><a href="#4-编写完成后点顶上绿色-▶-Run-按钮运行。" class="headerlink" title="4. 编写完成后点顶上绿色 ▶ Run 按钮运行。"></a>4. 编写完成后点顶上绿色 ▶ Run 按钮运行。</h3></div></details><p>文章备份：<a href="https://b1og.learnonly.xyz/article/01VC3T5Y5NY734QGFJDRE364YAMQD55JRF">https://b1og.learnonly.xyz/article/01VC3T5Y5NY734QGFJDRE364YAMQD55JRF</a></p><details class="toggle" style="border: 1px solid bg"><summary class="toggle-button" style="background-color: bg;color: color">使用 Bash 运行Alist </summary><div class="toggle-content"><h2 id="Alist-程序预览：https-alist-pighog-repl-co"><a href="#Alist-程序预览：https-alist-pighog-repl-co" class="headerlink" title="Alist 程序预览：https://alist.pighog.repl.co/"></a><a href="https://alist-doc.nn.ci/">Alist</a> 程序预览：<a href="https://alist.pighog.repl.co/">https://alist.pighog.repl.co/</a></h2><h3 id="0-一键部署到Replit（不推荐）"><a href="#0-一键部署到Replit（不推荐）" class="headerlink" title="0. 一键部署到Replit（不推荐）"></a>0. <a href="https://github.com/alist-org/alist-replit">一键部署到Replit（不推荐）</a></h3><h3 id="1-在教育Team创建Bash语言项目"><a href="#1-在教育Team创建Bash语言项目" class="headerlink" title="1. 在教育Team创建Bash语言项目"></a>1. 在教育Team创建Bash语言项目</h3><h3 id="2-下载二进制程序amd64并解压至项目根目录"><a href="#2-下载二进制程序amd64并解压至项目根目录" class="headerlink" title="2. 下载二进制程序amd64并解压至项目根目录"></a>2. 下载二进制程序<code>amd64</code>并解压至项目根目录</h3><h3 id="3-编写-replit-及-main-sh-文件"><a href="#3-编写-replit-及-main-sh-文件" class="headerlink" title="3. 编写 .replit 及 main.sh 文件"></a>3. 编写 <code>.replit</code> 及 <code>main.sh</code> 文件</h3><h4 id="检查-replit文件："><a href="#检查-replit文件：" class="headerlink" title="检查.replit文件："></a>检查<code>.replit</code>文件：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run = [&quot;bash&quot;, &quot;main.sh&quot;]</span><br><span class="line">entrypoint = &quot;main.sh&quot;</span><br></pre></td></tr></table></figure><h4 id="检查main-sh文件："><a href="#检查main-sh文件：" class="headerlink" title="检查main.sh文件："></a>检查<code>main.sh</code>文件：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span>  +x  alist-linux-amd64</span><br><span class="line">./alist-linux-amd64</span><br></pre></td></tr></table></figure><h3 id="4-编写完成后点顶上绿色-▶-Run-按钮运行。"><a href="#4-编写完成后点顶上绿色-▶-Run-按钮运行。" class="headerlink" title="4. 编写完成后点顶上绿色 ▶ Run 按钮运行。"></a>4. 编写完成后点顶上绿色 ▶ Run 按钮运行。</h3></div></details><p>文章备份：<a href="https://b1og.learnonly.xyz/article/01VC3T5Y6CGJ5Q4JTZWZF23VT3VIOU6QYU">https://b1og.learnonly.xyz/article/01VC3T5Y6CGJ5Q4JTZWZF23VT3VIOU6QYU</a></p><h2 id="在-Replit-中运行PHP-Web-Server项目：OneManager，Kodbox"><a href="#在-Replit-中运行PHP-Web-Server项目：OneManager，Kodbox" class="headerlink" title="在 Replit 中运行PHP Web Server项目：OneManager，Kodbox"></a>在 Replit 中运行PHP Web Server项目：OneManager，Kodbox</h2><details class="toggle" style="border: 1px solid bg"><summary class="toggle-button" style="background-color: bg;color: color">使用PHP Web Server部署OneManager </summary><div class="toggle-content"><h2 id="OneManager程序预览：https-one-pighog-repl-co"><a href="#OneManager程序预览：https-one-pighog-repl-co" class="headerlink" title="OneManager程序预览：https://one.pighog.repl.co/"></a>OneManager程序预览：<a href="https://one.pighog.repl.co/">https://one.pighog.repl.co/</a></h2><h3 id="1-在教育Team创建PHP-Web-Server语言项目"><a href="#1-在教育Team创建PHP-Web-Server语言项目" class="headerlink" title="1. 在教育Team创建PHP Web Server语言项目"></a>1. 在教育Team创建PHP Web Server语言项目</h3><h3 id="2-Clone-OneManager-php-仓库至项目根目录"><a href="#2-Clone-OneManager-php-仓库至项目根目录" class="headerlink" title="2. Clone OneManager-php 仓库至项目根目录"></a>2. Clone <a href="https://github.com/qkqpttgf/OneManager-php">OneManager-php</a> 仓库至项目根目录</h3><h3 id="3-编写-replit-及-main-sh-文件"><a href="#3-编写-replit-及-main-sh-文件" class="headerlink" title="3. 编写 .replit 及 main.sh 文件"></a>3. 编写 <code>.replit</code> 及 <code>main.sh</code> 文件</h3><h4 id="检查-replit文件："><a href="#检查-replit文件：" class="headerlink" title="检查.replit文件："></a>检查<code>.replit</code>文件：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">language = &quot;php74&quot;</span><br><span class="line">run = &quot;php -S 0.0.0.0:8000 index.php&quot;</span><br><span class="line">entrypoint = &quot;index.php&quot;</span><br></pre></td></tr></table></figure><h3 id="4-编写完成后点顶上绿色-▶-Run-按钮运行。"><a href="#4-编写完成后点顶上绿色-▶-Run-按钮运行。" class="headerlink" title="4. 编写完成后点顶上绿色 ▶ Run 按钮运行。"></a>4. 编写完成后点顶上绿色 ▶ Run 按钮运行。</h3></div></details><p>文章备份：<a href="https://b1og.learnonly.xyz/article/01VC3T5YYMXAZXCIULMFD3P5B7MZUAJE5R">https://b1og.learnonly.xyz/article/01VC3T5YYMXAZXCIULMFD3P5B7MZUAJE5R</a></p><details class="toggle" style="border: 1px solid bg"><summary class="toggle-button" style="background-color: bg;color: color">使用PHP Web Server部署Kodbox </summary><div class="toggle-content"><h2 id="Kodbox程序预览：https-kod-pighog-repl-co"><a href="#Kodbox程序预览：https-kod-pighog-repl-co" class="headerlink" title="Kodbox程序预览：https://kod.pighog.repl.co/"></a>Kodbox程序预览：<a href="https://kod.pighog.repl.co/">https://kod.pighog.repl.co/</a></h2><h3 id="1-在教育Team创建PHP-Web-Server语言项目"><a href="#1-在教育Team创建PHP-Web-Server语言项目" class="headerlink" title="1. 在教育Team创建PHP Web Server语言项目"></a>1. 在教育Team创建PHP Web Server语言项目</h3><h3 id="2-下载-Kodbox-压缩包并解压至项目根目录"><a href="#2-下载-Kodbox-压缩包并解压至项目根目录" class="headerlink" title="2. 下载 Kodbox 压缩包并解压至项目根目录"></a>2. 下载 <a href="https://kodcloud.com/download/">Kodbox</a> 压缩包并解压至项目根目录</h3><h3 id="3-操作麻烦晚点写。"><a href="#3-操作麻烦晚点写。" class="headerlink" title="3. 操作麻烦晚点写。"></a>3. 操作麻烦晚点写。</h3></div></details><p>文章备份：</p><h2 id="在-Replit-中运行Nodejs-16项目：Hexo"><a href="#在-Replit-中运行Nodejs-16项目：Hexo" class="headerlink" title="在 Replit 中运行Nodejs 16项目：Hexo"></a>在 Replit 中运行Nodejs 16项目：Hexo</h2><details class="toggle" style="border: 1px solid bg"><summary class="toggle-button" style="background-color: bg;color: color">使用Nodejs部署Hexo </summary><div class="toggle-content"><h2 id="Hexo程序预览：https-hexo-pighog-repl-co"><a href="#Hexo程序预览：https-hexo-pighog-repl-co" class="headerlink" title="Hexo程序预览：https://hexo.pighog.repl.co/"></a>Hexo程序预览：<a href="https://hexo.pighog.repl.co/">https://hexo.pighog.repl.co/</a></h2><h3 id="1-在教育Team创建Nodejs-16语言项目"><a href="#1-在教育Team创建Nodejs-16语言项目" class="headerlink" title="1. 在教育Team创建Nodejs 16语言项目"></a>1. 在教育Team创建Nodejs 16语言项目</h3><h3 id="2-如果有可以Clone自己Hexo项目的源码至根目录"><a href="#2-如果有可以Clone自己Hexo项目的源码至根目录" class="headerlink" title="2. 如果有可以Clone自己Hexo项目的源码至根目录"></a>2. 如果有可以Clone自己Hexo项目的源码至根目录</h3><h3 id="3-编写-replit文件："><a href="#3-编写-replit文件：" class="headerlink" title="3. 编写.replit文件："></a>3. 编写<code>.replit</code>文件：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># DO NOT CHANGE RUN COMMAND HERE</span><br><span class="line"># To change the run command either:</span><br><span class="line"># 1) change the run script in package.json</span><br><span class="line"># 2) replace npm run-script run in run.nix with your command</span><br><span class="line"></span><br><span class="line">run = &quot;npm run dev&quot;</span><br><span class="line">entrypoint = &quot;README.md&quot;</span><br><span class="line"></span><br><span class="line">language = &quot;nodejs&quot;</span><br><span class="line"></span><br><span class="line">[nix]</span><br><span class="line">channel=&quot;stable-21_11&quot;</span><br><span class="line"></span><br><span class="line">[packager]</span><br><span class="line">language = &quot;nodejs&quot;</span><br><span class="line"></span><br><span class="line">[packager.features]</span><br><span class="line">packageSearch = true</span><br><span class="line">guessImports = true</span><br><span class="line"></span><br><span class="line">[languages.nodejs]</span><br><span class="line">pattern = &quot;**/*.js&quot;</span><br><span class="line">syntax = &quot;nodejs&quot;</span><br><span class="line"></span><br><span class="line">[languages.nodejs.languageServer]</span><br><span class="line">start = [ &quot;typescript-language-server&quot;, &quot;--stdio&quot; ]</span><br></pre></td></tr></table></figure><h3 id="4-编写完成后点顶上绿色-▶-Run-按钮运行。"><a href="#4-编写完成后点顶上绿色-▶-Run-按钮运行。" class="headerlink" title="4. 编写完成后点顶上绿色 ▶ Run 按钮运行。"></a>4. 编写完成后点顶上绿色 ▶ Run 按钮运行。</h3></div></details><p>文章备份：<a href="https://b1og.learnonly.xyz/article/01VC3T5Y22O2IEBABDG5GKG7AFNBCFIJL7">https://b1og.learnonly.xyz/article/01VC3T5Y22O2IEBABDG5GKG7AFNBCFIJL7</a></p><h2 id="Replit的应用在一段时间不访问后会自动休眠减少资源消耗，如果大家想要保持运行可以用网站监控休眠设置5分钟定时访问保活。"><a href="#Replit的应用在一段时间不访问后会自动休眠减少资源消耗，如果大家想要保持运行可以用网站监控休眠设置5分钟定时访问保活。" class="headerlink" title="Replit的应用在一段时间不访问后会自动休眠减少资源消耗，如果大家想要保持运行可以用网站监控休眠设置5分钟定时访问保活。"></a>Replit的应用在一段时间不访问后会自动休眠减少资源消耗，如果大家想要保持运行可以用网站监控休眠设置5分钟定时访问保活。</h2><h3 id="出现各种问题可以在下面评论提问（Gitalk需要在Vercel域用，不能登录请使用Valine评论）"><a href="#出现各种问题可以在下面评论提问（Gitalk需要在Vercel域用，不能登录请使用Valine评论）" class="headerlink" title="出现各种问题可以在下面评论提问（Gitalk需要在Vercel域用，不能登录请使用Valine评论）"></a>出现各种问题可以在下面评论提问（Gitalk需要在Vercel域用，不能登录请使用Valine评论）</h3><p>全文备份：<a href="https://b1og.learnonly.xyz/article/01VC3T5Y7Z2JOMRAGM3BBZ5E7ZJDLYJLOR">https://b1og.learnonly.xyz/article/01VC3T5Y7Z2JOMRAGM3BBZ5E7ZJDLYJLOR</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> OneDrive </tag>
            
            <tag> 教程 </tag>
            
            <tag> Replit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用脚本定时备份SSH中任意文件至SSH或任意网盘</title>
      <link href="/p/a4f.html"/>
      <url>/p/a4f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>跳过前言直准备接开始<del>第三步为设置定时备份</del>设置远程ip与密码时应删除<code>``</code>符号与空格。格式参照：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">expect -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">spawn scp <span class="variable">$bakdescdir</span>/<span class="variable">$orowner</span>/<span class="variable">$bakdata</span> root@172.0.0.1 :<span class="variable">$remotePath</span>  </span></span><br><span class="line"><span class="string">expect &#123;</span></span><br><span class="line"><span class="string"> \&quot;*password\&quot; &#123;set timeout 500; send \&quot;changethispasswd\r\&quot;;&#125;</span></span><br><span class="line"><span class="string"> \&quot;yes/no\&quot; &#123;send \&quot;yes\r\&quot;; exp_continue;&#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">expect eof&quot;</span>  </span><br></pre></td></tr></table></figure><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><p>准备好要备份的机器Linux等</p><h4 id="1-在需要备份的机器中执行-yum-install-y-expect-安装expect插件（可选-yum-install-y-coscmd-使用cos对象存储）"><a href="#1-在需要备份的机器中执行-yum-install-y-expect-安装expect插件（可选-yum-install-y-coscmd-使用cos对象存储）" class="headerlink" title="1. 在需要备份的机器中执行  yum install -y expect 安装expect插件（可选 yum install -y coscmd 使用cos对象存储）"></a>1. 在需要备份的机器中执行  <code>yum install -y expect</code> 安装expect插件（可选 <code>yum install -y coscmd</code> 使用cos对象存储）</h4><h4 id="2-复制备份脚本-new-sh-至需要备份的机器-x2F-root"><a href="#2-复制备份脚本-new-sh-至需要备份的机器-x2F-root" class="headerlink" title="2. 复制备份脚本 new.sh 至需要备份的机器 &#x2F;root"></a>2. 复制备份脚本 new.sh 至需要备份的机器 &#x2F;root</h4><h4 id="3-设置cron定时备份：执行-crontab-e-在弹出的界面中按-i-后输入-0-0-root-new-sh-后按键盘-esc-键-输入-wq-保存"><a href="#3-设置cron定时备份：执行-crontab-e-在弹出的界面中按-i-后输入-0-0-root-new-sh-后按键盘-esc-键-输入-wq-保存" class="headerlink" title="3. 设置cron定时备份：执行 crontab -e 在弹出的界面中按 i 后输入 0 0 * * * /root/new.sh 后按键盘 esc 键 输入 :wq 保存"></a>3. 设置cron定时备份：执行 <code>crontab -e</code> 在弹出的界面中按 <code>i</code> 后输入 <code>0 0 * * * /root/new.sh</code> 后按键盘 <code>esc</code> 键 输入 <code>:wq</code> 保存</h4><h4 id="4-执行-service-crond-restart-重启cron定时服务"><a href="#4-执行-service-crond-restart-重启cron定时服务" class="headerlink" title="4. 执行 service crond restart 重启cron定时服务"></a>4. 执行 <code>service crond restart</code> 重启cron定时服务</h4><h4 id="5-sh-new-sh-测试-内容："><a href="#5-sh-new-sh-测试-内容：" class="headerlink" title="5. sh new.sh #测试 内容："></a>5. sh new.sh #测试 内容：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">dateTime=`<span class="built_in">date</span> +%Y_%m_%d_%H_%M_%S`       <span class="comment">#获取当前系统时间</span></span><br><span class="line">days=7       <span class="comment">#删除7天前的备份数据</span></span><br><span class="line">orowner=root    <span class="comment"># 备份到此用户下</span></span><br><span class="line">bakdescdir=/root/backup       <span class="comment">#备份文件到该路径</span></span><br><span class="line">bakdata=<span class="variable">$orowner</span><span class="string">&quot;_&quot;</span><span class="variable">$dateTime</span>.tar.gz     <span class="comment">#备份文件名</span></span><br><span class="line">baklog=<span class="variable">$orowner</span><span class="string">&quot;_&quot;</span><span class="variable">$dateTime</span>.<span class="built_in">log</span>       <span class="comment">#备份日志</span></span><br><span class="line">baksrcdir=/var/lib/mysql    <span class="comment">#需要备份的文件</span></span><br><span class="line">remotePath=/root/backup     <span class="comment">#远程服务器的路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> <span class="variable">$bakdescdir</span><span class="comment">#新建backup文件夹</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$bakdescdir</span>        <span class="comment">#进入备份目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$orowner</span>    <span class="comment">#按需要备份的用户创建目录     </span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$orowner</span>       <span class="comment">#进入目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;backup start at <span class="variable">$dateTime</span>&quot;</span> &gt; <span class="variable">$baklog</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;--------------------------&quot;</span> &gt;&gt;<span class="variable">$baklog</span></span><br><span class="line">tar -zcvf <span class="variable">$bakdata</span> <span class="variable">$baksrcdir</span> <span class="variable">$baklog</span>       <span class="comment">#压缩备份文件和日志文件</span></span><br><span class="line"></span><br><span class="line">find <span class="variable">$bakdescdir</span>/<span class="variable">$orowner</span> -<span class="built_in">type</span> f -name <span class="string">&quot;*.log&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> &#123;&#125; \;     </span><br><span class="line"><span class="comment">#删除日志文件</span></span><br><span class="line">find <span class="variable">$bakdescdir</span>/<span class="variable">$orowner</span> -<span class="built_in">type</span> f -name <span class="string">&quot;*.tar.gz&quot;</span> -mtime +<span class="variable">$days</span> -<span class="built_in">exec</span>   <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br><span class="line"><span class="comment">#删除 7 天前的备份</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置远程服务器ssh上传 使用expect插件自动输入密码</span></span><br><span class="line">expect -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">spawn scp <span class="variable">$bakdescdir</span>/<span class="variable">$orowner</span>/<span class="variable">$bakdata</span> root@ `远程服务器ip` :<span class="variable">$remotePath</span>  </span></span><br><span class="line"><span class="string">expect &#123;</span></span><br><span class="line"><span class="string"> \&quot;*password\&quot; &#123;set timeout 500; send \&quot; `远程服务器密码` \r\&quot;;&#125;</span></span><br><span class="line"><span class="string"> \&quot;yes/no\&quot; &#123;send \&quot;yes\r\&quot;; exp_continue;&#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">expect eof&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置上传到腾讯COS对象存储</span></span><br><span class="line">coscmd config -a COS AccessId -s COS SecretKey -b 桶名称 -r 桶地区 -m 10</span><br><span class="line">coscmd upload -r -s <span class="variable">$bakdescdir</span>/<span class="variable">$orowner</span>/<span class="variable">$bakdata</span></span><br></pre></td></tr></table></figure><h4 id="6-备份数据库的方法很多，这里用最笨的，直接备份文件。如果你没有远程服务器，可以使用微软的-Power-Automate-自动将-SSH-中的文件同步至Onedrive"><a href="#6-备份数据库的方法很多，这里用最笨的，直接备份文件。如果你没有远程服务器，可以使用微软的-Power-Automate-自动将-SSH-中的文件同步至Onedrive" class="headerlink" title="6. 备份数据库的方法很多，这里用最笨的，直接备份文件。如果你没有远程服务器，可以使用微软的 Power Automate 自动将 SSH 中的文件同步至Onedrive"></a>6. 备份数据库的方法很多，这里用最笨的，直接备份文件。如果你没有远程服务器，可以使用微软的 Power Automate 自动将 SSH 中的文件同步至Onedrive</h4><h4 id="7-如果输入crontab-e报错请百度解决方法，一般是-环境有问题，可以尝试安装-yum-install-y-vixie-cron-或-yum-install-cronie-或百度！"><a href="#7-如果输入crontab-e报错请百度解决方法，一般是-环境有问题，可以尝试安装-yum-install-y-vixie-cron-或-yum-install-cronie-或百度！" class="headerlink" title="7. 如果输入crontab -e报错请百度解决方法，一般是 环境有问题，可以尝试安装 yum install -y vixie-cron 或 yum install cronie 或百度！"></a>7. 如果输入crontab -e报错请百度解决方法，一般是 环境有问题，可以尝试安装 <code>yum install -y vixie-cron</code> 或 <code>yum install cronie</code> 或百度！</h4><h4 id="8-文章备份：https-b1og-learnonly-xyz-article-01VC3T5YZEW3R5W3EEDJHIRZZ4MWAWIQV5"><a href="#8-文章备份：https-b1og-learnonly-xyz-article-01VC3T5YZEW3R5W3EEDJHIRZZ4MWAWIQV5" class="headerlink" title="8.文章备份：https://b1og.learnonly.xyz/article/01VC3T5YZEW3R5W3EEDJHIRZZ4MWAWIQV5"></a>8.文章备份：<a href="https://b1og.learnonly.xyz/article/01VC3T5YZEW3R5W3EEDJHIRZZ4MWAWIQV5">https://b1og.learnonly.xyz/article/01VC3T5YZEW3R5W3EEDJHIRZZ4MWAWIQV5</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> 网盘 </tag>
            
            <tag> OneDrive </tag>
            
            <tag> 教程 </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ZeroTier居家办公</title>
      <link href="/p/439d.html"/>
      <url>/p/439d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>疫情间需要居家办公怎么办？单位电脑有资料临时要用怎么办？本次给大家带来许多局域网应用教程。所有程序均在局域网运行，理论上没有被攻击的隐患。<strong>注意！以下教程使用到的阿里云盘在2022&#x2F;03&#x2F;28后均有概率封号。云盘请选择OneDrive或其他。</strong></p><h1 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h1><p>安装好 Zerotier 并完成局域网连接。</p><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><h3 id="Zerotier（局域网P2P的神！）-Alist（一个网盘挂载程序）-ES-file-manager（ES文件浏览器）实现手机备份任意文件至任意网盘。"><a href="#Zerotier（局域网P2P的神！）-Alist（一个网盘挂载程序）-ES-file-manager（ES文件浏览器）实现手机备份任意文件至任意网盘。" class="headerlink" title="Zerotier（局域网P2P的神！）+Alist（一个网盘挂载程序）+ES file manager（ES文件浏览器）实现手机备份任意文件至任意网盘。"></a>Zerotier（局域网P2P的神！）+Alist（一个网盘挂载程序）+ES file manager（ES文件浏览器）实现手机备份任意文件至任意网盘。</h3><details class="toggle" style="border: 1px solid bg"><summary class="toggle-button" style="background-color: bg;color: color">使用ES文件浏览器手机备份任意文件至任意网盘 </summary><div class="toggle-content"></div></details><p>文章备份：</p><h3 id="使用Aria2-家用电脑-宝塔面板（辅助）-CloudDrive（辅助）实现网页离线下载文件至OneDrive-x2F-阿里云盘-x2F-天翼云盘-x2F-115云盘等。"><a href="#使用Aria2-家用电脑-宝塔面板（辅助）-CloudDrive（辅助）实现网页离线下载文件至OneDrive-x2F-阿里云盘-x2F-天翼云盘-x2F-115云盘等。" class="headerlink" title="使用Aria2+家用电脑+宝塔面板（辅助）+CloudDrive（辅助）实现网页离线下载文件至OneDrive&#x2F;阿里云盘&#x2F;天翼云盘&#x2F;115云盘等。"></a>使用Aria2+家用电脑+宝塔面板（辅助）+CloudDrive（辅助）实现网页离线下载文件至OneDrive&#x2F;阿里云盘&#x2F;天翼云盘&#x2F;115云盘等。</h3><details class="toggle" style="border: 1px solid bg"><summary class="toggle-button" style="background-color: bg;color: color">使用Aria2离线下载文件至OneDrive </summary><div class="toggle-content"></div></details><p>文章备份：</p><h3 id="使用KodBox搭建文件管理器，可以随时随地网页浏览电脑文件（支持浏览编辑Excel、Word、PPT、图片、文档、PDF、音乐等，甚至支持在线PS，在线CAD查看，NES模拟器游玩等丰富功能。）"><a href="#使用KodBox搭建文件管理器，可以随时随地网页浏览电脑文件（支持浏览编辑Excel、Word、PPT、图片、文档、PDF、音乐等，甚至支持在线PS，在线CAD查看，NES模拟器游玩等丰富功能。）" class="headerlink" title="使用KodBox搭建文件管理器，可以随时随地网页浏览电脑文件（支持浏览编辑Excel、Word、PPT、图片、文档、PDF、音乐等，甚至支持在线PS，在线CAD查看，NES模拟器游玩等丰富功能。）"></a>使用KodBox搭建文件管理器，可以随时随地网页浏览电脑文件（支持浏览编辑Excel、Word、PPT、图片、文档、PDF、音乐等，甚至支持在线PS，在线CAD查看，NES模拟器游玩等丰富功能。）</h3><details class="toggle" style="border: 1px solid bg"><summary class="toggle-button" style="background-color: bg;color: color">使用KodBox搭建文件管理器 </summary><div class="toggle-content"></div></details><p>文章备份：</p>]]></content>
      
      
      
        <tags>
            
            <tag> ZeroTier </tag>
            
            <tag> 白嫖 </tag>
            
            <tag> 网盘 </tag>
            
            <tag> OneDrive </tag>
            
            <tag> Alist </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Typora写作并配置PicGo图床推荐</title>
      <link href="/p/a8f2.html"/>
      <url>/p/a8f2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>搭好博客需要开始写作了，如果你想在多个平台发布你的文章的话，一定少不了一个图床的使用。这里就不啰嗦图床是什么了（网上有一大堆Picgo+Github&#x2F;Gitee之类的教程）这里总结一下我用的图床以及配置教程。</p><h1 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h1><p>下载 <a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo</a>（图片上传到图床的程序）</p><p>下载 <a href="https://typora.io/">Typora</a>（用来写MarkDown的程序） </p><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><h2 id="图床推荐"><a href="#图床推荐" class="headerlink" title="图床推荐"></a>图床推荐</h2><p>这里不推荐使用Gitee（仓库小，图片超过5M不能直链显示，国内服务有实名审核等问题），但是后面会使用 GithubAction 将图床同步至Gitee。</p><h3 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h3><p>1.<a href="https://poweredby.cloud/">https://poweredby.cloud/</a><br>可用 5G 个人OneDrive 储存<br>PicGo插件：<a href="https://github.com/wayjam/picgo-plugin-s3">https://github.com/wayjam/picgo-plugin-s3</a><br>优点：方便管理，访问快速<br>问题：PicGo不支持4M以上文件上传</p><p>2.<a href="https://pigone.000webhostapp.com/">https://pigone.000webhostapp.com/</a><br>可用 5T OneDrive For Business 储存<br>（需自建应用程序或使用公共配置）<br>PicGo插件：<a href="https://github.com/yuki-xin/picgo-plugin-web-uploader">https://github.com/yuki-xin/picgo-plugin-web-uploader</a><br>优点：存储空间巨巨大，方便管理，访问速度看vps<br>问题：PicGo不支持4M以上文件上传，搭建程序可能有额外费用</p><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p>可使用 1G 仓库储存<br>优点：配置方便，GithubAction灵活<br>问题：空间小，仓库存满有概率检测封号</p><h3 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h3><p>所有仓库共用 10G 储存<br>PicGo插件：<a href="https://github.com/D-W-X/picgo-plugin-gitlab-files">https://github.com/D-W-X/picgo-plugin-gitlab-files</a><br>优点：国内访问速度比Github快<br>问题：？</p><p>推荐以上所有仓库都新建账号使用。</p><p>我日常使用为：大图片直接上传至 企业5T OneDrive 后手动复制直链，截图等内容使用Poweredby.cloud的S3服务，传至 个人OneDrive 写作时Typora自动转换直链。Github仓库应该放些小文件，或重要的备份文件。</p><h2 id="Github进阶"><a href="#Github进阶" class="headerlink" title="Github进阶"></a>Github进阶</h2><details class="toggle" style="border: 1px solid bg"><summary class="toggle-button" style="background-color: bg;color: color">将Github仓库同步至网盘及Gitlab，Gitee </summary><div class="toggle-content"></div></details><h2 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> 网盘 </tag>
            
            <tag> OneDrive </tag>
            
            <tag> 教程 </tag>
            
            <tag> GithubAction </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GithubAction推送仓库至任意网盘</title>
      <link href="/p/a7fa.html"/>
      <url>/p/a7fa.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><h3 id="Github站队，虽然不影响我们使用，但是这里发一个备份方法，希望帮助到有这样想法的大家。"><a href="#Github站队，虽然不影响我们使用，但是这里发一个备份方法，希望帮助到有这样想法的大家。" class="headerlink" title="Github站队，虽然不影响我们使用，但是这里发一个备份方法，希望帮助到有这样想法的大家。"></a>Github站队，虽然不影响我们使用，但是这里发一个备份方法，希望帮助到有这样想法的大家。</h3><h3 id="同时还有Github同步到Gitee，Gitlab的Action，后面会一起发（这个网上其实很多）。"><a href="#同时还有Github同步到Gitee，Gitlab的Action，后面会一起发（这个网上其实很多）。" class="headerlink" title="同时还有Github同步到Gitee，Gitlab的Action，后面会一起发（这个网上其实很多）。"></a>同时还有Github同步到Gitee，Gitlab的Action，后面会一起发（这个网上其实很多）。</h3><h1 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h1><p>下载 <a href="https://rclone.org/">Rclone</a> （用来生成 rclone.conf ）</p><p>下载 <a href="http://www.7-zip.org.cn/">7Zip</a> （用来压缩 rclone.conf 并设置密码 ）</p><p>准备好需要备份的仓库。</p><p>准备一个网盘，教程中使用 <a href="https://alist-doc.nn.ci/">Alist</a> 挂载阿里云。</p><p>其他网盘可以 <a href="https://www.bing.com/search?q=rclone%E6%8C%82%E8%BD%BD">百度 Rclone挂载</a> 你想使用的网盘。</p><p>教程视频：<a href="https://www.bilibili.com/video/BV1ER4y1V7wu/">哔哩哔哩_bilibili</a></p><h1 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h1><h3 id="首先打开-Rclone-Gui-或-CMD-，新建网盘。"><a href="#首先打开-Rclone-Gui-或-CMD-，新建网盘。" class="headerlink" title="首先打开 Rclone Gui 或 CMD ，新建网盘。"></a>首先打开 Rclone Gui 或 CMD ，新建网盘。</h3><p><img src="https://img.pighog.repl.co/2022/03/image-20220309230601882.png" alt="image-20220309230601882"></p><p>在弹出的CMD中按流程新建，并生成配置文件。生成后打开 rclone.conf</p><p><img src="https://img.pighog.repl.co/2022/03/image-20220309230831786.png" alt="image-20220309230831786"></p><p>打开 rclone.conf 后内容大致为如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[aliyun]</span><br><span class="line">type = webdav #网盘类别</span><br><span class="line">url = #webdav路径</span><br><span class="line">vendor = other #webdav供应商</span><br><span class="line">user = admin #webdav用户</span><br><span class="line">pass = #webdav密码 此密码在CMD中输入密码后自动生成</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[e5]</span><br><span class="line">type = onedrive</span><br><span class="line">client_id = #客户端id</span><br><span class="line">client_secret = #客户端机密</span><br><span class="line">token = &#123;&quot;access_token&quot;:&quot;xxx&quot;,&quot;expiry&quot;:&quot;timexxx&quot;&#125;</span><br><span class="line">drive_id = #自动生成</span><br><span class="line">drive_type = business</span><br></pre></td></tr></table></figure><p>rclone挂载各种各样盘可以百度 <a href="https://www.bing.com/search?q=rclone%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91">rclone挂载阿里云</a> <a href="https://www.bing.com/search?q=rclone%E6%8C%82%E8%BD%BDonedrive">rclone挂载onedrive</a> 等。以上有任意一个可以挂载的即可。确认可以挂载后，将 rclone.conf 压缩为zip <code>rclone.zip</code> 并设置 <strong>密码</strong> （保护网盘信息）。</p><h3 id="设置Secrets-添加密码"><a href="#设置Secrets-添加密码" class="headerlink" title="设置Secrets 添加密码"></a>设置Secrets 添加密码</h3><p>打开需要备份的仓库，点仓库中的 <strong>Settings</strong> ,并找到 <strong>New repository secret</strong> ← 点击。</p><p><img src="https://img.pighog.repl.co/2022/03/image-20220309232516695.png" alt="image-20220309232516695"></p><p><img src="https://img.pighog.repl.co/2022/03/image-20220309232705904.png" alt="image-20220309232705904"></p><p>在弹出的界面中 <code>Name</code> 项框中填 <code>PASSWD</code> 全大写，<code>Value</code> 项框中填 <code>刚刚设置的压缩包zip密码</code> 填好点 <code>Add secret </code> 按钮。</p><h3 id="上传-rclone-zip-至项目-需要备份的仓库-根目录"><a href="#上传-rclone-zip-至项目-需要备份的仓库-根目录" class="headerlink" title="上传 rclone.zip 至项目(需要备份的仓库)根目录"></a>上传 <code>rclone.zip</code> 至项目(需要备份的仓库)根目录</h3><h3 id="打开你需要备份的仓库，点击-Actions-选项，新建-Workflow"><a href="#打开你需要备份的仓库，点击-Actions-选项，新建-Workflow" class="headerlink" title="打开你需要备份的仓库，点击 Actions 选项，新建 Workflow"></a>打开你需要备份的仓库，点击 <strong>Actions</strong> 选项，新建 <strong>Workflow</strong></h3><p><img src="https://img.pighog.repl.co/2022/03/image-20220309224714579.png" alt="image-20220309224714579"></p><p><img src="https://img.pighog.repl.co/2022/03/image-20220309224810932.png" alt="image-20220309224810932"></p><h3 id="点-set-up-a-workflow-yourself-→"><a href="#点-set-up-a-workflow-yourself-→" class="headerlink" title="点 set up a workflow yourself →"></a>点 <strong>set up a workflow yourself</strong> →</h3><p>将以下代码粘贴至 main.yml （可改名.yml）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">backup</span> <span class="string">to</span> <span class="string">onedrive</span> <span class="comment">#Action运行标题</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="comment">#运行条件</span></span><br><span class="line">  <span class="attr">push:</span> <span class="comment">#推送到 master 时运行</span></span><br><span class="line">    <span class="attr">branches:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span>  <span class="comment">#看自己仓库，有些是main</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="comment">#定时运行</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="number">0</span> <span class="number">22</span> <span class="number">1</span><span class="string">/2</span> <span class="string">*</span> <span class="string">*</span></span><br><span class="line">  <span class="attr">watch:</span> <span class="comment">#点star时运行</span></span><br><span class="line">    <span class="attr">types:</span> <span class="string">started</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">run-it:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zip</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">codes</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">rclone</span> <span class="comment">#安装rclone</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">curl</span> <span class="string">https://rclone.org/install.sh</span> <span class="string">|</span> <span class="string">sudo</span> <span class="string">bash</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Unzip</span> <span class="string">config</span> <span class="comment">#解压配置文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">         mkdir -p ~/.config/rclone/</span></span><br><span class="line"><span class="string">         unzip -P $&#123;&#123; secrets.PASSWD &#125;&#125; rclone.zip -d ~/.config/rclone/</span></span><br><span class="line"><span class="string"></span>     </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">rclone</span> <span class="comment">#运行rclone</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string">          # 延迟函数 可以删</span></span><br><span class="line"><span class="string">          delay()</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">          random_time=$(($RANDOM % $1))</span></span><br><span class="line"><span class="string">          echo &quot;等待 $&#123;random_time&#125; 分钟后开始&quot;</span></span><br><span class="line"><span class="string">          for((i=1;i&lt;=$&#123;random_time&#125;;i++));  </span></span><br><span class="line"><span class="string">          do</span></span><br><span class="line"><span class="string">          echo &quot;倒计时 $[$&#123;random_time&#125;-$i] 分钟&quot;</span></span><br><span class="line"><span class="string">          sleep 1m</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          # 随机延迟0~2分钟后再进行操作,可自行设置时间 都能删</span></span><br><span class="line"><span class="string">          delay 2 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line">          <span class="comment"># 更改时区 可以删</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">cp</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai</span> <span class="string">/etc/localtime</span></span><br><span class="line">          <span class="string">ls</span> <span class="string">-a</span></span><br><span class="line">          <span class="comment"># 生成时间写入time.log ，将网盘目录写入lsf.log 可以删</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">`date</span> <span class="string">+&quot;%Y-%m-%d</span> <span class="string">%H:%M:%S&quot;`</span> <span class="string">begin</span> <span class="string">&gt;</span> <span class="string">time.log</span> </span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;列出文件(此处不展示)&quot;</span> <span class="comment">#可以删</span></span><br><span class="line">          <span class="string">rclone</span> <span class="string">lsf</span> <span class="string">e5:/</span> <span class="string">&gt;</span> <span class="string">&quot;lsf.log&quot;</span></span><br><span class="line">          <span class="string">rclone</span> <span class="string">mkdir</span> <span class="string">e5:/github/xxx</span></span><br><span class="line">          <span class="string">rclone</span> <span class="string">sync</span> <span class="string">./</span> <span class="string">e5:/github/xxx</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Zip</span> <span class="string">config</span> <span class="comment">#打包配置文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">zip</span> <span class="string">-P</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PASSWD</span> <span class="string">&#125;&#125;</span> <span class="string">rclone.zip</span> <span class="string">-j</span> <span class="string">~/.config/rclone/rclone.conf</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">config</span> <span class="comment">#提交配置文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">         git config --global user.email &quot;550029691@qq.com&quot;</span></span><br><span class="line"><span class="string">         git config --global user.name &quot;valetzx&quot;</span></span><br><span class="line"><span class="string">         git add .</span></span><br><span class="line"><span class="string">         git commit -am &quot;GitHub Actions Auto Rclone at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span></span><br><span class="line"><span class="string">         git push --force # --force 是强制推送可以删</span></span><br></pre></td></tr></table></figure><p><img src="https://img.pighog.repl.co/2022/03/image-20220309225159141.png" alt="image-20220309225159141"></p><p>此处 e5 是rclone.conf中的[e5]盘名（rclone新建网盘时指定的名字）</p><p><code>rclone mkdir e5:/github/xxx</code> 指在 e5 中新建 github&#x2F;xxx 文件夹</p><p><code>rclone sync ./ e5:/github/xxx</code> 指 同步 .&#x2F; 文件夹至 e5:&#x2F;github&#x2F;xxx</p><p>此处 .&#x2F; 是github根目录，更多命令可以百度，改完之后出问题就暂时不解决了。</p><h2 id="如果需要备份多个仓库，以上几个步骤缺一不可（顺序不重要）"><a href="#如果需要备份多个仓库，以上几个步骤缺一不可（顺序不重要）" class="headerlink" title="如果需要备份多个仓库，以上几个步骤缺一不可（顺序不重要）"></a>如果需要备份多个仓库，以上几个步骤缺一不可（顺序不重要）</h2><p>当然 <code>rclone.zip</code> 可以不用每次都生成，如果你想备份在同一个盘里的话。</p><p><img src="https://img.pighog.repl.co/2022/03/image-20220309233721287.png" alt="image-20220309233721287"></p><p>其实有一个Action就能同步多个仓库的方法，但是不能实时(推送后同步，而且需要用Github服务器下载。有概率封号?这里放一下，建议别用。在更改时区后可以插入更多命令，比如git clone。想试可以自己试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 更改时区</span><br><span class="line">          sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">          git clone https://github.com/pigeonpig/pigeonpig.github.io.git #需要备份的仓库</span><br><span class="line">          git clone https://github.com/pigeonpig/xxx #需要备份的仓库</span><br><span class="line">          git clone https://github.com/pigeonpig/xxx #需要备份的仓库</span><br><span class="line">          #最后也是用 sync 同步 但是 吃资源 不太 香，这个方法没试过，不想整。</span><br></pre></td></tr></table></figure><h2 id="视频教程直链Alist：202203092151-mp4"><a href="#视频教程直链Alist：202203092151-mp4" class="headerlink" title="视频教程直链Alist：202203092151.mp4 "></a><del>视频教程直链Alist：<a href="https://flyist.fly.dev/Sharelist/movie!/%E7%8C%AA/202203092151.mp4">202203092151.mp4 </a></del></h2><h2 id="本文章备份地址：Pigpigeon’s-blog"><a href="#本文章备份地址：Pigpigeon’s-blog" class="headerlink" title="本文章备份地址：Pigpigeon’s blog"></a>本文章备份地址：<a href="https://b1og.learnonly.xyz/article/01VC3T5Y66KR42LGMUYBCZNUEBT7MWKMJL">Pigpigeon’s blog</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> 网盘 </tag>
            
            <tag> 教程 </tag>
            
            <tag> GithubAction </tag>
            
            <tag> 自动部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做完毕设后的假期</title>
      <link href="/p/dc3a.html"/>
      <url>/p/dc3a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="家与我"><a href="#家与我" class="headerlink" title="家与我"></a>家与我</h1><h3 id="一月的匆匆的家"><a href="#一月的匆匆的家" class="headerlink" title="一月的匆匆的家"></a>一月的匆匆的家</h3><p>回家过的元旦，前面两条都在书店转转。整个城市到处乱逛。</p><p><img src="https://img.pighog.repl.co/2022/03/image-20220309155345253.png" alt="image-20220309155345253"></p><p>1月7日左右奶奶身体吃坏了，开车送了两条医院。</p><p>1月10日把笨系统重装了一下，把作业文件传到了Onedrive，并且准备开始捣鼓捣鼓续订。虽然已经续了将近两年多了，但是放上去的文件越多越怕他掉订阅。</p><p>1月15日买了新衣服，要准备过年了，20号帮爸爸开了个Ondrive子账号，将他的文件也存一下。买了胡萝卜面。</p><p>1月21日的早饭，（在家除了起来跑步都很少吃早饭。</p><p><img src="https://gitlab.com/valetzx/img/raw/main/img/16_13_20220121.jpg"></p><p>1月21日爸爸买的空气炸锅到了，晚上买了点薯条试了试。</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test2-1">0121薯条</button></li><li class="tab"><button type="button" data-href="#test2-2">0123早饭</button></li><li class="tab"><button type="button" data-href="#test2-3">0123烤翅</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test2-1"><p><img src="https://img.pighog.repl.co/2022/03/20220121kqzg.jpg" alt="20220121kqzg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><img src="https://img.pighog.repl.co/2022/03/20220123.jpg" alt="20220123"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-3"><p><img src="https://img.pighog.repl.co/2022/03/202201232.jpg" alt="20220123"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>1月25日奶奶过生日，洗了个牙。</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test3-1">0125蛋糕</button></li><li class="tab"><button type="button" data-href="#test3-2">0125洗牙</button></li><li class="tab"><button type="button" data-href="#test3-3">0125团子</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test3-1"><p><img src="https://img.pighog.repl.co/2022/03/20220125.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><img src="https://img.pighog.repl.co/2022/03/202201251.jpg" alt="202201251"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><img src="https://img.pighog.repl.co/2022/03/202201252.jpg" alt="202201252"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>1月27日有吃早饭。1月31日年夜饭。</p><p><img src="https://img.pighog.repl.co/2022/03/20220131.jpg"></p><h3 id="二月匆匆的我"><a href="#二月匆匆的我" class="headerlink" title="二月匆匆的我"></a>二月匆匆的我</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 流水账 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>截止文章发表日期所获成就及奖项</title>
      <link href="/p/a95e.html"/>
      <url>/p/a95e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="https://gitlab.com/valetzx/pubfile/raw/main/img/computer/087_2021-01-14_70B27B42.jpeg" alt="087_2021-01-14_70B27B42"></p><h2 id="2017-09-取得-全国计算机等级考试MS-Office一级证书"><a href="#2017-09-取得-全国计算机等级考试MS-Office一级证书" class="headerlink" title="2017-09 取得 全国计算机等级考试MS Office一级证书"></a>2017-09 取得 全国计算机等级考试MS Office一级证书</h2><h2 id="2018-06-25-取得-陶瓷装饰工-四级-x2F-中级技能"><a href="#2018-06-25-取得-陶瓷装饰工-四级-x2F-中级技能" class="headerlink" title="2018-06-25 取得 陶瓷装饰工 四级&#x2F;中级技能"></a>2018-06-25 取得 陶瓷装饰工 四级&#x2F;中级技能</h2><h2 id="2019-08-26-取得-机动车驾驶证-准驾C1"><a href="#2019-08-26-取得-机动车驾驶证-准驾C1" class="headerlink" title="2019-08-26 取得 机动车驾驶证 准驾C1"></a>2019-08-26 取得 机动车驾驶证 准驾C1</h2><h2 id="2019-12-30-取得-“读者协会”社团积极分子称号"><a href="#2019-12-30-取得-“读者协会”社团积极分子称号" class="headerlink" title="2019-12-30 取得 “读者协会”社团积极分子称号"></a>2019-12-30 取得 “读者协会”社团积极分子称号</h2><h2 id="2020-03-01-取得-高等学校英语应用考试B级证书"><a href="#2020-03-01-取得-高等学校英语应用考试B级证书" class="headerlink" title="2020-03-01 取得 高等学校英语应用考试B级证书"></a>2020-03-01 取得 高等学校英语应用考试B级证书</h2><h2 id="2020-05-04-取得-普通话等级证书-二乙"><a href="#2020-05-04-取得-普通话等级证书-二乙" class="headerlink" title="2020-05-04 取得 普通话等级证书 二乙"></a>2020-05-04 取得 普通话等级证书 二乙</h2><h2 id="2020-11-18-在2020年常纺读书节活动中被评为2019-2020年度“读者之星”"><a href="#2020-11-18-在2020年常纺读书节活动中被评为2019-2020年度“读者之星”" class="headerlink" title="2020-11-18 在2020年常纺读书节活动中被评为2019-2020年度“读者之星”"></a>2020-11-18 在2020年常纺读书节活动中被评为2019-2020年度“读者之星”</h2><h3 id="并在闭幕仪式上代表发言：https-www-cztgi-edu-cn-2020-1118-c900a47419-page-htm"><a href="#并在闭幕仪式上代表发言：https-www-cztgi-edu-cn-2020-1118-c900a47419-page-htm" class="headerlink" title="并在闭幕仪式上代表发言：https://www.cztgi.edu.cn/2020/1118/c900a47419/page.htm"></a>并在闭幕仪式上代表发言：<a href="https://www.cztgi.edu.cn/2020/1118/c900a47419/page.htm">https://www.cztgi.edu.cn/2020/1118/c900a47419/page.htm</a></h3><h3 id="2021-12-14-在2021年常纺读书节活动中被评为2020-2021年度“读者之星”"><a href="#2021-12-14-在2021年常纺读书节活动中被评为2020-2021年度“读者之星”" class="headerlink" title="2021-12-14 在2021年常纺读书节活动中被评为2020-2021年度“读者之星”"></a>2021-12-14 在2021年常纺读书节活动中被评为2020-2021年度“读者之星”</h3><details class="toggle" style="border: 1px solid bg"><summary class="toggle-button" style="background-color: bg;color: color">网页快照</summary><div class="toggle-content"><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_13_59_41_20220226135941.png"><br><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_13_7_51_20220226130751.png"></p></div></details><h2 id="2020-2021-H2-担任-“星火社”社团-社长职务"><a href="#2020-2021-H2-担任-“星火社”社团-社长职务" class="headerlink" title="2020-2021-H2 担任 “星火社”社团 社长职务"></a>2020-2021-H2 担任 “星火社”社团 社长职务</h2><h2 id="2019-2020-H1-获得-院奖学金二等奖-100元"><a href="#2019-2020-H1-获得-院奖学金二等奖-100元" class="headerlink" title="2019-2020-H1 获得 院奖学金二等奖 100元"></a>2019-2020-H1 获得 院奖学金二等奖 100元</h2><h2 id="2019-2020-H2-获得-校优秀学生奖学金-800元"><a href="#2019-2020-H2-获得-校优秀学生奖学金-800元" class="headerlink" title="2019-2020-H2 获得 校优秀学生奖学金 800元"></a>2019-2020-H2 获得 校优秀学生奖学金 800元</h2><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_14_3_53_20220226140353.png"></p><h2 id="2020-2021-H1-获得-院奖学金一等奖-200元"><a href="#2020-2021-H1-获得-院奖学金一等奖-200元" class="headerlink" title="2020-2021-H1 获得 院奖学金一等奖 200元"></a>2020-2021-H1 获得 院奖学金一等奖 200元</h2><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_14_2_10_-2a806821b9246a10.png"></p><h2 id="2020-2021-H2-获得-校优秀学生奖学金-800元"><a href="#2020-2021-H2-获得-校优秀学生奖学金-800元" class="headerlink" title="2020-2021-H2 获得 校优秀学生奖学金 800元"></a>2020-2021-H2 获得 校优秀学生奖学金 800元</h2><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_14_9_38_20220226140937.png"></p><h2 id="2019-2020-Q4-为学校制作-2019年国家奖学金获奖学生风采录"><a href="#2019-2020-Q4-为学校制作-2019年国家奖学金获奖学生风采录" class="headerlink" title="2019-2020-Q4 为学校制作 2019年国家奖学金获奖学生风采录"></a>2019-2020-Q4 为学校制作 2019年国家奖学金获奖学生风采录</h2><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">振翅高飞</button></li><li class="tab"><button type="button" data-href="#test4-2">正当时</button></li><li class="tab"><button type="button" data-href="#test4-3">国家奖学金风采录</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_14_18_51_201912142.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_14_18_51_20191214.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_14_18_51_201912141.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的21年毕设</title>
      <link href="/p/a5af.html"/>
      <url>/p/a5af.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="田籽格-—-耕-·-食体验馆"><a href="#田籽格-—-耕-·-食体验馆" class="headerlink" title="田籽格 — 耕 · 食体验馆"></a>田籽格 — 耕 · 食体验馆</h1><h2 id="这是我2021年的毕业设计，主题为-“魔术盒子”：将-4米5-见方的盒子排列组合，形成建筑原始结构，并进行配套室-内、外-环境设计；"><a href="#这是我2021年的毕业设计，主题为-“魔术盒子”：将-4米5-见方的盒子排列组合，形成建筑原始结构，并进行配套室-内、外-环境设计；" class="headerlink" title="这是我2021年的毕业设计，主题为 “魔术盒子”：将 4米5 见方的盒子排列组合，形成建筑原始结构，并进行配套室 内、外 环境设计；"></a>这是我2021年的毕业设计，主题为 “魔术盒子”：将 <strong>4米5</strong> 见方的盒子排列组合，形成建筑原始结构，并进行配套室 <strong>内、外</strong> 环境设计；</h2><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/25_22_44_53_box.png"></p><h2 id="我在开始想做家装内容（因为选了一个人做，想做少点内容精细些）出了两次平面图给知道老师看之后，换成了公装设计。内容做多些，做的花哨点，由于专业学的家装，做公装要注意的东西就多了，接下来先看一下成片展板吧！（900mmX2000mm）"><a href="#我在开始想做家装内容（因为选了一个人做，想做少点内容精细些）出了两次平面图给知道老师看之后，换成了公装设计。内容做多些，做的花哨点，由于专业学的家装，做公装要注意的东西就多了，接下来先看一下成片展板吧！（900mmX2000mm）" class="headerlink" title="我在开始想做家装内容（因为选了一个人做，想做少点内容精细些）出了两次平面图给知道老师看之后，换成了公装设计。内容做多些，做的花哨点，由于专业学的家装，做公装要注意的东西就多了，接下来先看一下成片展板吧！（900mmX2000mm）"></a>我在开始想做家装内容（因为选了一个人做，想做少点内容精细些）出了两次平面图给知道老师看之后，换成了公装设计。内容做多些，做的花哨点，由于专业学的家装，做公装要注意的东西就多了，接下来先看一下成片展板吧！（900mmX2000mm）</h2><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/25_22_44_51_panel.png"></p><h2 id="在整个耕·食体验馆建筑中，运用最多的元素就是方块和圆弧了。圆与方是相比较而存在的。彩平及材料展示："><a href="#在整个耕·食体验馆建筑中，运用最多的元素就是方块和圆弧了。圆与方是相比较而存在的。彩平及材料展示：" class="headerlink" title="在整个耕·食体验馆建筑中，运用最多的元素就是方块和圆弧了。圆与方是相比较而存在的。彩平及材料展示："></a>在整个耕·食体验馆建筑中，运用最多的元素就是方块和圆弧了。圆与方是相比较而存在的。彩平及材料展示：</h2><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_15_35_6_boxfinal101.png"></p><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_15_36_18_boxfinal102.png"></p><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_15_38_44_boxfinal103.png"></p><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_15_39_58_boxfinal104.png"></p><h2 id="渲染图展示："><a href="#渲染图展示：" class="headerlink" title="渲染图展示："></a>渲染图展示：</h2><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/26_15_41_12_boxfinal105.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 毕设 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课程作业-别墅设计</title>
      <link href="/p/13bd.html"/>
      <url>/p/13bd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="大作业，两个联排打通改一户，要配置电梯。以下是彩平展示（当时一次接触彩平）。"><a href="#大作业，两个联排打通改一户，要配置电梯。以下是彩平展示（当时一次接触彩平）。" class="headerlink" title="大作业，两个联排打通改一户，要配置电梯。以下是彩平展示（当时一次接触彩平）。"></a>大作业，两个联排打通改一户，要配置电梯。以下是彩平展示（当时一次接触彩平）。</h1><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">一层</button></li><li class="tab"><button type="button" data-href="#test4-2">二层</button></li><li class="tab"><button type="button" data-href="#test4-3">三层</button></li><li class="tab"><button type="button" data-href="#test4-4">四层</button></li><li class="tab"><button type="button" data-href="#test4-5">负一层</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/25_16_16_29_1-%E5%9B%BE%E5%A2%99%E4%BD%93.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/25_16_16_29_2-%E5%9B%BE%E5%A2%99%E4%BD%93.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/25_16_16_29_3-%E5%9B%BE%E5%A2%99%E4%BD%93.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-4"><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/25_16_16_29_4-%E5%9B%BE%E5%A2%99%E4%BD%93.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-5"><p><img src="https://gitlab.com/valetzx/img/raw/main/img/2022/02/25_16_16_29_%E8%B4%9F1-%E5%9B%BE%E5%A2%99%E4%BD%93.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="一层"><a href="#一层" class="headerlink" title="一层"></a>一层</h2><h2 id="二层"><a href="#二层" class="headerlink" title="二层"></a>二层</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
